/* tslint:disable */
/* eslint-disable */
/**
 * ManagementResourceApi
 * This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.
 *
 * The version of the OpenAPI document: 1.1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { RolloutStrategy } from '../models';
// @ts-ignore
import { RolloutStrategyInfo } from '../models';
// @ts-ignore
import { RolloutStrategyValidationRequest } from '../models';
// @ts-ignore
import { RolloutStrategyValidationResponse } from '../models';
// @ts-ignore
import { ObjectSerializer } from '../models';
/**
 * RolloutStrategyServiceApi - axios parameter creator
 * @export
 */
export const RolloutStrategyServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {RolloutStrategy} rolloutStrategy 
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRolloutStrategy: async (appId: string, rolloutStrategy: RolloutStrategy, includeWhoChanged?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling createRolloutStrategy.');
            }
            // verify required parameter 'rolloutStrategy' is not null or undefined
            if (rolloutStrategy === null || rolloutStrategy === undefined) {
                throw new RequiredError('rolloutStrategy','Required parameter rolloutStrategy was null or undefined when calling createRolloutStrategy.');
            }
            const localVarPath = `/mr-api/application/{appId}/rollout-strategy`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeWhoChanged !== undefined) {
                localVarQueryParameter['includeWhoChanged'] = includeWhoChanged;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof rolloutStrategy !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(rolloutStrategy !== undefined ? ObjectSerializer.serialize(rolloutStrategy, 'RolloutStrategy') : {}) : (rolloutStrategy || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} strategyIdOrName The id of the strategy or the unique name of it
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRolloutStrategy: async (appId: string, strategyIdOrName: string, includeWhoChanged?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling deleteRolloutStrategy.');
            }
            // verify required parameter 'strategyIdOrName' is not null or undefined
            if (strategyIdOrName === null || strategyIdOrName === undefined) {
                throw new RequiredError('strategyIdOrName','Required parameter strategyIdOrName was null or undefined when calling deleteRolloutStrategy.');
            }
            const localVarPath = `/mr-api/application/{appId}/rollout-strategy/{strategyIdOrName}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"strategyIdOrName"}}`, encodeURIComponent(String(strategyIdOrName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeWhoChanged !== undefined) {
                localVarQueryParameter['includeWhoChanged'] = includeWhoChanged;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} strategyIdOrName The id of the strategy or the unique name of it
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolloutStrategy: async (appId: string, strategyIdOrName: string, includeWhoChanged?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling getRolloutStrategy.');
            }
            // verify required parameter 'strategyIdOrName' is not null or undefined
            if (strategyIdOrName === null || strategyIdOrName === undefined) {
                throw new RequiredError('strategyIdOrName','Required parameter strategyIdOrName was null or undefined when calling getRolloutStrategy.');
            }
            const localVarPath = `/mr-api/application/{appId}/rollout-strategy/{strategyIdOrName}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"strategyIdOrName"}}`, encodeURIComponent(String(strategyIdOrName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeWhoChanged !== undefined) {
                localVarQueryParameter['includeWhoChanged'] = includeWhoChanged;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {boolean} [includeArchived] Include archived strategies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicationRolloutStrategies: async (appId: string, includeWhoChanged?: boolean, includeArchived?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling listApplicationRolloutStrategies.');
            }
            const localVarPath = `/mr-api/application/{appId}/rollout-strategy`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeWhoChanged !== undefined) {
                localVarQueryParameter['includeWhoChanged'] = includeWhoChanged;
            }

            if (includeArchived !== undefined) {
                localVarQueryParameter['includeArchived'] = includeArchived;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} strategyIdOrName The id of the strategy or the unique name of it
         * @param {RolloutStrategy} rolloutStrategy 
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRolloutStrategy: async (appId: string, strategyIdOrName: string, rolloutStrategy: RolloutStrategy, includeWhoChanged?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling updateRolloutStrategy.');
            }
            // verify required parameter 'strategyIdOrName' is not null or undefined
            if (strategyIdOrName === null || strategyIdOrName === undefined) {
                throw new RequiredError('strategyIdOrName','Required parameter strategyIdOrName was null or undefined when calling updateRolloutStrategy.');
            }
            // verify required parameter 'rolloutStrategy' is not null or undefined
            if (rolloutStrategy === null || rolloutStrategy === undefined) {
                throw new RequiredError('rolloutStrategy','Required parameter rolloutStrategy was null or undefined when calling updateRolloutStrategy.');
            }
            const localVarPath = `/mr-api/application/{appId}/rollout-strategy/{strategyIdOrName}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"strategyIdOrName"}}`, encodeURIComponent(String(strategyIdOrName)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeWhoChanged !== undefined) {
                localVarQueryParameter['includeWhoChanged'] = includeWhoChanged;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof rolloutStrategy !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(rolloutStrategy !== undefined ? ObjectSerializer.serialize(rolloutStrategy, 'RolloutStrategy') : {}) : (rolloutStrategy || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provide server validation responses for this group of rollout strategies
         * @param {string} appId The id of the application to find
         * @param {RolloutStrategyValidationRequest} rolloutStrategyValidationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate: async (appId: string, rolloutStrategyValidationRequest: RolloutStrategyValidationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling validate.');
            }
            // verify required parameter 'rolloutStrategyValidationRequest' is not null or undefined
            if (rolloutStrategyValidationRequest === null || rolloutStrategyValidationRequest === undefined) {
                throw new RequiredError('rolloutStrategyValidationRequest','Required parameter rolloutStrategyValidationRequest was null or undefined when calling validate.');
            }
            const localVarPath = `/mr-api/application/{appId}/rollout-strategy-validation`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof rolloutStrategyValidationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(rolloutStrategyValidationRequest !== undefined ? ObjectSerializer.serialize(rolloutStrategyValidationRequest, 'RolloutStrategyValidationRequest') : {}) : (rolloutStrategyValidationRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RolloutStrategyServiceApi - functional programming interface
 * @export
 */
export const RolloutStrategyServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {RolloutStrategy} rolloutStrategy 
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRolloutStrategy(appId: string, rolloutStrategy: RolloutStrategy, includeWhoChanged?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolloutStrategyInfo>> {
            const localVarAxiosArgs = await RolloutStrategyServiceApiAxiosParamCreator(configuration).createRolloutStrategy(appId, rolloutStrategy, includeWhoChanged, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} strategyIdOrName The id of the strategy or the unique name of it
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRolloutStrategy(appId: string, strategyIdOrName: string, includeWhoChanged?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolloutStrategyInfo>> {
            const localVarAxiosArgs = await RolloutStrategyServiceApiAxiosParamCreator(configuration).deleteRolloutStrategy(appId, strategyIdOrName, includeWhoChanged, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} strategyIdOrName The id of the strategy or the unique name of it
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRolloutStrategy(appId: string, strategyIdOrName: string, includeWhoChanged?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolloutStrategyInfo>> {
            const localVarAxiosArgs = await RolloutStrategyServiceApiAxiosParamCreator(configuration).getRolloutStrategy(appId, strategyIdOrName, includeWhoChanged, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {boolean} [includeArchived] Include archived strategies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApplicationRolloutStrategies(appId: string, includeWhoChanged?: boolean, includeArchived?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RolloutStrategyInfo>>> {
            const localVarAxiosArgs = await RolloutStrategyServiceApiAxiosParamCreator(configuration).listApplicationRolloutStrategies(appId, includeWhoChanged, includeArchived, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} strategyIdOrName The id of the strategy or the unique name of it
         * @param {RolloutStrategy} rolloutStrategy 
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRolloutStrategy(appId: string, strategyIdOrName: string, rolloutStrategy: RolloutStrategy, includeWhoChanged?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolloutStrategyInfo>> {
            const localVarAxiosArgs = await RolloutStrategyServiceApiAxiosParamCreator(configuration).updateRolloutStrategy(appId, strategyIdOrName, rolloutStrategy, includeWhoChanged, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provide server validation responses for this group of rollout strategies
         * @param {string} appId The id of the application to find
         * @param {RolloutStrategyValidationRequest} rolloutStrategyValidationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validate(appId: string, rolloutStrategyValidationRequest: RolloutStrategyValidationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolloutStrategyValidationResponse>> {
            const localVarAxiosArgs = await RolloutStrategyServiceApiAxiosParamCreator(configuration).validate(appId, rolloutStrategyValidationRequest, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RolloutStrategyServiceApi - factory interface
 * @export
 */
export const RolloutStrategyServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {RolloutStrategy} rolloutStrategy 
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRolloutStrategy(appId: string, rolloutStrategy: RolloutStrategy, includeWhoChanged?: boolean, options?: any): AxiosPromise<RolloutStrategyInfo> {
            return RolloutStrategyServiceApiFp(configuration).createRolloutStrategy(appId, rolloutStrategy, includeWhoChanged, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} strategyIdOrName The id of the strategy or the unique name of it
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRolloutStrategy(appId: string, strategyIdOrName: string, includeWhoChanged?: boolean, options?: any): AxiosPromise<RolloutStrategyInfo> {
            return RolloutStrategyServiceApiFp(configuration).deleteRolloutStrategy(appId, strategyIdOrName, includeWhoChanged, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} strategyIdOrName The id of the strategy or the unique name of it
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRolloutStrategy(appId: string, strategyIdOrName: string, includeWhoChanged?: boolean, options?: any): AxiosPromise<RolloutStrategyInfo> {
            return RolloutStrategyServiceApiFp(configuration).getRolloutStrategy(appId, strategyIdOrName, includeWhoChanged, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {boolean} [includeArchived] Include archived strategies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicationRolloutStrategies(appId: string, includeWhoChanged?: boolean, includeArchived?: boolean, options?: any): AxiosPromise<Array<RolloutStrategyInfo>> {
            return RolloutStrategyServiceApiFp(configuration).listApplicationRolloutStrategies(appId, includeWhoChanged, includeArchived, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} strategyIdOrName The id of the strategy or the unique name of it
         * @param {RolloutStrategy} rolloutStrategy 
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRolloutStrategy(appId: string, strategyIdOrName: string, rolloutStrategy: RolloutStrategy, includeWhoChanged?: boolean, options?: any): AxiosPromise<RolloutStrategyInfo> {
            return RolloutStrategyServiceApiFp(configuration).updateRolloutStrategy(appId, strategyIdOrName, rolloutStrategy, includeWhoChanged, options).then((request) => request(axios, basePath));
        },
        /**
         * Provide server validation responses for this group of rollout strategies
         * @param {string} appId The id of the application to find
         * @param {RolloutStrategyValidationRequest} rolloutStrategyValidationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate(appId: string, rolloutStrategyValidationRequest: RolloutStrategyValidationRequest, options?: any): AxiosPromise<RolloutStrategyValidationResponse> {
            return RolloutStrategyServiceApiFp(configuration).validate(appId, rolloutStrategyValidationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RolloutStrategyServiceApi - object-oriented interface
 * @export
 * @class RolloutStrategyServiceApi
 * @extends {BaseAPI}
 */
export class RolloutStrategyServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} appId The id of the application to find
     * @param {RolloutStrategy} rolloutStrategy 
     * @param {boolean} [includeWhoChanged] include who changed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolloutStrategyServiceApi
     */
    public createRolloutStrategy(appId: string, rolloutStrategy: RolloutStrategy, includeWhoChanged?: boolean, options?: any): AxiosPromise<RolloutStrategyInfo> {
        return RolloutStrategyServiceApiFp(this.configuration).createRolloutStrategy(appId, rolloutStrategy, includeWhoChanged, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} appId The id of the application to find
     * @param {string} strategyIdOrName The id of the strategy or the unique name of it
     * @param {boolean} [includeWhoChanged] include who changed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolloutStrategyServiceApi
     */
    public deleteRolloutStrategy(appId: string, strategyIdOrName: string, includeWhoChanged?: boolean, options?: any): AxiosPromise<RolloutStrategyInfo> {
        return RolloutStrategyServiceApiFp(this.configuration).deleteRolloutStrategy(appId, strategyIdOrName, includeWhoChanged, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} appId The id of the application to find
     * @param {string} strategyIdOrName The id of the strategy or the unique name of it
     * @param {boolean} [includeWhoChanged] include who changed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolloutStrategyServiceApi
     */
    public getRolloutStrategy(appId: string, strategyIdOrName: string, includeWhoChanged?: boolean, options?: any): AxiosPromise<RolloutStrategyInfo> {
        return RolloutStrategyServiceApiFp(this.configuration).getRolloutStrategy(appId, strategyIdOrName, includeWhoChanged, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} appId The id of the application to find
     * @param {boolean} [includeWhoChanged] include who changed
     * @param {boolean} [includeArchived] Include archived strategies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolloutStrategyServiceApi
     */
    public listApplicationRolloutStrategies(appId: string, includeWhoChanged?: boolean, includeArchived?: boolean, options?: any): AxiosPromise<Array<RolloutStrategyInfo>> {
        return RolloutStrategyServiceApiFp(this.configuration).listApplicationRolloutStrategies(appId, includeWhoChanged, includeArchived, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} appId The id of the application to find
     * @param {string} strategyIdOrName The id of the strategy or the unique name of it
     * @param {RolloutStrategy} rolloutStrategy 
     * @param {boolean} [includeWhoChanged] include who changed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolloutStrategyServiceApi
     */
    public updateRolloutStrategy(appId: string, strategyIdOrName: string, rolloutStrategy: RolloutStrategy, includeWhoChanged?: boolean, options?: any): AxiosPromise<RolloutStrategyInfo> {
        return RolloutStrategyServiceApiFp(this.configuration).updateRolloutStrategy(appId, strategyIdOrName, rolloutStrategy, includeWhoChanged, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provide server validation responses for this group of rollout strategies
     * @param {string} appId The id of the application to find
     * @param {RolloutStrategyValidationRequest} rolloutStrategyValidationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RolloutStrategyServiceApi
     */
    public validate(appId: string, rolloutStrategyValidationRequest: RolloutStrategyValidationRequest, options?: any): AxiosPromise<RolloutStrategyValidationResponse> {
        return RolloutStrategyServiceApiFp(this.configuration).validate(appId, rolloutStrategyValidationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
