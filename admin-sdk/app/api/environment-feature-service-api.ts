/* tslint:disable */
/* eslint-disable */
/**
 * ManagementResourceApi
 * This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { EnvironmentFeaturesResult } from '../models';
// @ts-ignore
import { FeatureValue } from '../models';
// @ts-ignore
import { RolloutStrategyValidationResponse } from '../models';
// @ts-ignore
import { ObjectSerializer } from '../models';
/**
 * EnvironmentFeatureServiceApi - axios parameter creator
 * @export
 */
export const EnvironmentFeatureServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a specific feature in this environment.
         * @param {string} eid The id of the environment to find features
         * @param {string} key The key of the relevant feature
         * @param {FeatureValue} featureValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureForEnvironment: async (eid: string, key: string, featureValue: FeatureValue, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'eid' is not null or undefined
            if (eid === null || eid === undefined) {
                throw new RequiredError('eid','Required parameter eid was null or undefined when calling createFeatureForEnvironment.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling createFeatureForEnvironment.');
            }
            // verify required parameter 'featureValue' is not null or undefined
            if (featureValue === null || featureValue === undefined) {
                throw new RequiredError('featureValue','Required parameter featureValue was null or undefined when calling createFeatureForEnvironment.');
            }
            const localVarPath = `/mr-api/features/{eid}/feature/{key}`
                .replace(`{${"eid"}}`, encodeURIComponent(String(eid)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof featureValue !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(featureValue !== undefined ? ObjectSerializer.serialize(featureValue, 'FeatureValue') : {}) : (featureValue || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * No longer supported. Please update to a null value.
         * @param {string} eid The id of the environment to find features
         * @param {string} key The key of the relevant feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureForEnvironment: async (eid: string, key: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'eid' is not null or undefined
            if (eid === null || eid === undefined) {
                throw new RequiredError('eid','Required parameter eid was null or undefined when calling deleteFeatureForEnvironment.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling deleteFeatureForEnvironment.');
            }
            const localVarPath = `/mr-api/features/{eid}/feature/{key}`
                .replace(`{${"eid"}}`, encodeURIComponent(String(eid)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific feature in this environment.
         * @param {string} eid The id of the environment to find features
         * @param {string} key The key of the relevant feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureForEnvironment: async (eid: string, key: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'eid' is not null or undefined
            if (eid === null || eid === undefined) {
                throw new RequiredError('eid','Required parameter eid was null or undefined when calling getFeatureForEnvironment.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getFeatureForEnvironment.');
            }
            const localVarPath = `/mr-api/features/{eid}/feature/{key}`
                .replace(`{${"eid"}}`, encodeURIComponent(String(eid)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all features for this environment
         * @param {string} eid The id of the environment to find features or \&#39;latest\&#39;
         * @param {boolean} [includeFeatures] include the features in the result
         * @param {string} [filter] Filter the feature names by this filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeaturesForEnvironment: async (eid: string, includeFeatures?: boolean, filter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'eid' is not null or undefined
            if (eid === null || eid === undefined) {
                throw new RequiredError('eid','Required parameter eid was null or undefined when calling getFeaturesForEnvironment.');
            }
            const localVarPath = `/mr-api/features/{eid}`
                .replace(`{${"eid"}}`, encodeURIComponent(String(eid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeFeatures !== undefined) {
                localVarQueryParameter['includeFeatures'] = includeFeatures;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update all features for this environment that are passed. Ignores any other feature values that are not passed.
         * @param {string} eid The id of the environment to find features or \&#39;latest\&#39;
         * @param {Array<FeatureValue>} featureValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllFeaturesForEnvironment: async (eid: string, featureValue: Array<FeatureValue>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'eid' is not null or undefined
            if (eid === null || eid === undefined) {
                throw new RequiredError('eid','Required parameter eid was null or undefined when calling updateAllFeaturesForEnvironment.');
            }
            // verify required parameter 'featureValue' is not null or undefined
            if (featureValue === null || featureValue === undefined) {
                throw new RequiredError('featureValue','Required parameter featureValue was null or undefined when calling updateAllFeaturesForEnvironment.');
            }
            const localVarPath = `/mr-api/features/{eid}`
                .replace(`{${"eid"}}`, encodeURIComponent(String(eid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof featureValue !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(featureValue !== undefined ? ObjectSerializer.serialize(featureValue, 'Array<FeatureValue>') : {}) : (featureValue || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific feature in this environment.
         * @param {string} eid The id of the environment to find features
         * @param {string} key The key of the relevant feature
         * @param {FeatureValue} featureValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeatureForEnvironment: async (eid: string, key: string, featureValue: FeatureValue, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'eid' is not null or undefined
            if (eid === null || eid === undefined) {
                throw new RequiredError('eid','Required parameter eid was null or undefined when calling updateFeatureForEnvironment.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling updateFeatureForEnvironment.');
            }
            // verify required parameter 'featureValue' is not null or undefined
            if (featureValue === null || featureValue === undefined) {
                throw new RequiredError('featureValue','Required parameter featureValue was null or undefined when calling updateFeatureForEnvironment.');
            }
            const localVarPath = `/mr-api/features/{eid}/feature/{key}`
                .replace(`{${"eid"}}`, encodeURIComponent(String(eid)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof featureValue !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(featureValue !== undefined ? ObjectSerializer.serialize(featureValue, 'FeatureValue') : {}) : (featureValue || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvironmentFeatureServiceApi - functional programming interface
 * @export
 */
export const EnvironmentFeatureServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a specific feature in this environment.
         * @param {string} eid The id of the environment to find features
         * @param {string} key The key of the relevant feature
         * @param {FeatureValue} featureValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeatureForEnvironment(eid: string, key: string, featureValue: FeatureValue, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureValue>> {
            const localVarAxiosArgs = await EnvironmentFeatureServiceApiAxiosParamCreator(configuration).createFeatureForEnvironment(eid, key, featureValue, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * No longer supported. Please update to a null value.
         * @param {string} eid The id of the environment to find features
         * @param {string} key The key of the relevant feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFeatureForEnvironment(eid: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await EnvironmentFeatureServiceApiAxiosParamCreator(configuration).deleteFeatureForEnvironment(eid, key, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a specific feature in this environment.
         * @param {string} eid The id of the environment to find features
         * @param {string} key The key of the relevant feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatureForEnvironment(eid: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureValue>> {
            const localVarAxiosArgs = await EnvironmentFeatureServiceApiAxiosParamCreator(configuration).getFeatureForEnvironment(eid, key, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all features for this environment
         * @param {string} eid The id of the environment to find features or \&#39;latest\&#39;
         * @param {boolean} [includeFeatures] include the features in the result
         * @param {string} [filter] Filter the feature names by this filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeaturesForEnvironment(eid: string, includeFeatures?: boolean, filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EnvironmentFeaturesResult>> {
            const localVarAxiosArgs = await EnvironmentFeatureServiceApiAxiosParamCreator(configuration).getFeaturesForEnvironment(eid, includeFeatures, filter, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update all features for this environment that are passed. Ignores any other feature values that are not passed.
         * @param {string} eid The id of the environment to find features or \&#39;latest\&#39;
         * @param {Array<FeatureValue>} featureValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAllFeaturesForEnvironment(eid: string, featureValue: Array<FeatureValue>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureValue>>> {
            const localVarAxiosArgs = await EnvironmentFeatureServiceApiAxiosParamCreator(configuration).updateAllFeaturesForEnvironment(eid, featureValue, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a specific feature in this environment.
         * @param {string} eid The id of the environment to find features
         * @param {string} key The key of the relevant feature
         * @param {FeatureValue} featureValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFeatureForEnvironment(eid: string, key: string, featureValue: FeatureValue, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureValue>> {
            const localVarAxiosArgs = await EnvironmentFeatureServiceApiAxiosParamCreator(configuration).updateFeatureForEnvironment(eid, key, featureValue, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EnvironmentFeatureServiceApi - factory interface
 * @export
 */
export const EnvironmentFeatureServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a specific feature in this environment.
         * @param {string} eid The id of the environment to find features
         * @param {string} key The key of the relevant feature
         * @param {FeatureValue} featureValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureForEnvironment(eid: string, key: string, featureValue: FeatureValue, options?: any): AxiosPromise<FeatureValue> {
            return EnvironmentFeatureServiceApiFp(configuration).createFeatureForEnvironment(eid, key, featureValue, options).then((request) => request(axios, basePath));
        },
        /**
         * No longer supported. Please update to a null value.
         * @param {string} eid The id of the environment to find features
         * @param {string} key The key of the relevant feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureForEnvironment(eid: string, key: string, options?: any): AxiosPromise<void> {
            return EnvironmentFeatureServiceApiFp(configuration).deleteFeatureForEnvironment(eid, key, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific feature in this environment.
         * @param {string} eid The id of the environment to find features
         * @param {string} key The key of the relevant feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureForEnvironment(eid: string, key: string, options?: any): AxiosPromise<FeatureValue> {
            return EnvironmentFeatureServiceApiFp(configuration).getFeatureForEnvironment(eid, key, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all features for this environment
         * @param {string} eid The id of the environment to find features or \&#39;latest\&#39;
         * @param {boolean} [includeFeatures] include the features in the result
         * @param {string} [filter] Filter the feature names by this filter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeaturesForEnvironment(eid: string, includeFeatures?: boolean, filter?: string, options?: any): AxiosPromise<EnvironmentFeaturesResult> {
            return EnvironmentFeatureServiceApiFp(configuration).getFeaturesForEnvironment(eid, includeFeatures, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Update all features for this environment that are passed. Ignores any other feature values that are not passed.
         * @param {string} eid The id of the environment to find features or \&#39;latest\&#39;
         * @param {Array<FeatureValue>} featureValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllFeaturesForEnvironment(eid: string, featureValue: Array<FeatureValue>, options?: any): AxiosPromise<Array<FeatureValue>> {
            return EnvironmentFeatureServiceApiFp(configuration).updateAllFeaturesForEnvironment(eid, featureValue, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific feature in this environment.
         * @param {string} eid The id of the environment to find features
         * @param {string} key The key of the relevant feature
         * @param {FeatureValue} featureValue 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeatureForEnvironment(eid: string, key: string, featureValue: FeatureValue, options?: any): AxiosPromise<FeatureValue> {
            return EnvironmentFeatureServiceApiFp(configuration).updateFeatureForEnvironment(eid, key, featureValue, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvironmentFeatureServiceApi - object-oriented interface
 * @export
 * @class EnvironmentFeatureServiceApi
 * @extends {BaseAPI}
 */
export class EnvironmentFeatureServiceApi extends BaseAPI {
    /**
     * Create a specific feature in this environment.
     * @param {string} eid The id of the environment to find features
     * @param {string} key The key of the relevant feature
     * @param {FeatureValue} featureValue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentFeatureServiceApi
     */
    public createFeatureForEnvironment(eid: string, key: string, featureValue: FeatureValue, options?: any): AxiosPromise<FeatureValue> {
        return EnvironmentFeatureServiceApiFp(this.configuration).createFeatureForEnvironment(eid, key, featureValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * No longer supported. Please update to a null value.
     * @param {string} eid The id of the environment to find features
     * @param {string} key The key of the relevant feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentFeatureServiceApi
     */
    public deleteFeatureForEnvironment(eid: string, key: string, options?: any): AxiosPromise<void> {
        return EnvironmentFeatureServiceApiFp(this.configuration).deleteFeatureForEnvironment(eid, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific feature in this environment.
     * @param {string} eid The id of the environment to find features
     * @param {string} key The key of the relevant feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentFeatureServiceApi
     */
    public getFeatureForEnvironment(eid: string, key: string, options?: any): AxiosPromise<FeatureValue> {
        return EnvironmentFeatureServiceApiFp(this.configuration).getFeatureForEnvironment(eid, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all features for this environment
     * @param {string} eid The id of the environment to find features or \&#39;latest\&#39;
     * @param {boolean} [includeFeatures] include the features in the result
     * @param {string} [filter] Filter the feature names by this filter.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentFeatureServiceApi
     */
    public getFeaturesForEnvironment(eid: string, includeFeatures?: boolean, filter?: string, options?: any): AxiosPromise<EnvironmentFeaturesResult> {
        return EnvironmentFeatureServiceApiFp(this.configuration).getFeaturesForEnvironment(eid, includeFeatures, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update all features for this environment that are passed. Ignores any other feature values that are not passed.
     * @param {string} eid The id of the environment to find features or \&#39;latest\&#39;
     * @param {Array<FeatureValue>} featureValue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentFeatureServiceApi
     */
    public updateAllFeaturesForEnvironment(eid: string, featureValue: Array<FeatureValue>, options?: any): AxiosPromise<Array<FeatureValue>> {
        return EnvironmentFeatureServiceApiFp(this.configuration).updateAllFeaturesForEnvironment(eid, featureValue, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific feature in this environment.
     * @param {string} eid The id of the environment to find features
     * @param {string} key The key of the relevant feature
     * @param {FeatureValue} featureValue 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentFeatureServiceApi
     */
    public updateFeatureForEnvironment(eid: string, key: string, featureValue: FeatureValue, options?: any): AxiosPromise<FeatureValue> {
        return EnvironmentFeatureServiceApiFp(this.configuration).updateFeatureForEnvironment(eid, key, featureValue, options).then((request) => request(this.axios, this.basePath));
    }
}
