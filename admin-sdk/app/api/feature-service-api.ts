/* tslint:disable */
/* eslint-disable */
/**
 * ManagementResourceApi
 * This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.
 *
 * The version of the OpenAPI document: 1.1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApplicationFeatureValues } from '../models';
// @ts-ignore
import { Feature } from '../models';
// @ts-ignore
import { FeatureEnvironment } from '../models';
// @ts-ignore
import { FeatureValue } from '../models';
// @ts-ignore
import { FeatureValueType } from '../models';
// @ts-ignore
import { RolloutStrategyValidationResponse } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
// @ts-ignore
import { ObjectSerializer } from '../models';
/**
 * FeatureServiceApi - axios parameter creator
 * @export
 */
export const FeatureServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * add a new feature to this application, returns all features.
         * @param {string} id The id of the application to find
         * @param {Feature} feature 
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeaturesForApplication: async (id: string, feature: Feature, includeMetaData?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createFeaturesForApplication.');
            }
            // verify required parameter 'feature' is not null or undefined
            if (feature === null || feature === undefined) {
                throw new RequiredError('feature','Required parameter feature was null or undefined when calling createFeaturesForApplication.');
            }
            const localVarPath = `/mr-api/application/{id}/features`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeMetaData !== undefined) {
                localVarQueryParameter['includeMetaData'] = includeMetaData;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof feature !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(feature !== undefined ? ObjectSerializer.serialize(feature, 'Feature') : {}) : (feature || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * updates all named features in this application, returns all features.
         * @param {string} id The id of the application to find
         * @param {string} key The named unique key of the associated feature
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureForApplication: async (id: string, key: string, includeMetaData?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteFeatureForApplication.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling deleteFeatureForApplication.');
            }
            const localVarPath = `/mr-api/application/{id}/features/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeMetaData !== undefined) {
                localVarQueryParameter['includeMetaData'] = includeMetaData;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all environments and features and their values that this user has access to
         * @param {string} id The id of the application to find
         * @param {string} [filter] A filter to apply to the features - partial match of key or description
         * @param {number} [max] The maximum number of features to get for this page
         * @param {number} [page] The page number of the results. 0 indexed.
         * @param {Array<FeatureValueType>} [featureTypes] 
         * @param {SortOrder} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllFeatureAndFeatureValuesForEnvironmentsByApplication: async (id: string, filter?: string, max?: number, page?: number, featureTypes?: Array<FeatureValueType>, sortOrder?: SortOrder, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling findAllFeatureAndFeatureValuesForEnvironmentsByApplication.');
            }
            const localVarPath = `/mr-api/application/{id}/all-feature-environment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (max !== undefined) {
                localVarQueryParameter['max'] = max;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (featureTypes !== undefined) {
                localVarQueryParameter['featureTypes'] = featureTypes;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of all environments and features and their values that this user has access to
         * @param {string} id The id of the application to find
         * @param {string} key The key of the associated feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFeatureValuesByApplicationForKey: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAllFeatureValuesByApplicationForKey.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getAllFeatureValuesByApplicationForKey.');
            }
            const localVarPath = `/mr-api/application/{id}/feature-environments/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get all features available in this application
         * @param {string} id The id of the application to find
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFeaturesForApplication: async (id: string, includeMetaData?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getAllFeaturesForApplication.');
            }
            const localVarPath = `/mr-api/application/{id}/features`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeMetaData !== undefined) {
                localVarQueryParameter['includeMetaData'] = includeMetaData;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * get an individual feature
         * @param {string} id The id of the application to find
         * @param {string} key The named unique key of the associated feature
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureByKey: async (id: string, key: string, includeMetaData?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getFeatureByKey.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling getFeatureByKey.');
            }
            const localVarPath = `/mr-api/application/{id}/features/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeMetaData !== undefined) {
                localVarQueryParameter['includeMetaData'] = includeMetaData;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a list of all environments and features and their values that this user has access to
         * @param {string} id The id of the application to find
         * @param {string} key The key of the associated feature
         * @param {Array<FeatureValue>} featureValue 
         * @param {boolean} [removeValuesNotPassed] The id of the application to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllFeatureValuesByApplicationForKey: async (id: string, key: string, featureValue: Array<FeatureValue>, removeValuesNotPassed?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateAllFeatureValuesByApplicationForKey.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling updateAllFeatureValuesByApplicationForKey.');
            }
            // verify required parameter 'featureValue' is not null or undefined
            if (featureValue === null || featureValue === undefined) {
                throw new RequiredError('featureValue','Required parameter featureValue was null or undefined when calling updateAllFeatureValuesByApplicationForKey.');
            }
            const localVarPath = `/mr-api/application/{id}/feature-environments/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (removeValuesNotPassed !== undefined) {
                localVarQueryParameter['removeValuesNotPassed'] = removeValuesNotPassed;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof featureValue !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(featureValue !== undefined ? ObjectSerializer.serialize(featureValue, 'Array<FeatureValue>') : {}) : (featureValue || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * updates all named features in this application, returns all features.
         * @param {string} id The id of the application to find
         * @param {string} key The named unique key of the associated feature
         * @param {Feature} feature 
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeatureForApplication: async (id: string, key: string, feature: Feature, includeMetaData?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateFeatureForApplication.');
            }
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling updateFeatureForApplication.');
            }
            // verify required parameter 'feature' is not null or undefined
            if (feature === null || feature === undefined) {
                throw new RequiredError('feature','Required parameter feature was null or undefined when calling updateFeatureForApplication.');
            }
            const localVarPath = `/mr-api/application/{id}/features/{key}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeMetaData !== undefined) {
                localVarQueryParameter['includeMetaData'] = includeMetaData;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof feature !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(feature !== undefined ? ObjectSerializer.serialize(feature, 'Feature') : {}) : (feature || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeatureServiceApi - functional programming interface
 * @export
 */
export const FeatureServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * add a new feature to this application, returns all features.
         * @param {string} id The id of the application to find
         * @param {Feature} feature 
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeaturesForApplication(id: string, feature: Feature, includeMetaData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Feature>>> {
            const localVarAxiosArgs = await FeatureServiceApiAxiosParamCreator(configuration).createFeaturesForApplication(id, feature, includeMetaData, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * updates all named features in this application, returns all features.
         * @param {string} id The id of the application to find
         * @param {string} key The named unique key of the associated feature
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFeatureForApplication(id: string, key: string, includeMetaData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Feature>>> {
            const localVarAxiosArgs = await FeatureServiceApiAxiosParamCreator(configuration).deleteFeatureForApplication(id, key, includeMetaData, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of all environments and features and their values that this user has access to
         * @param {string} id The id of the application to find
         * @param {string} [filter] A filter to apply to the features - partial match of key or description
         * @param {number} [max] The maximum number of features to get for this page
         * @param {number} [page] The page number of the results. 0 indexed.
         * @param {Array<FeatureValueType>} [featureTypes] 
         * @param {SortOrder} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllFeatureAndFeatureValuesForEnvironmentsByApplication(id: string, filter?: string, max?: number, page?: number, featureTypes?: Array<FeatureValueType>, sortOrder?: SortOrder, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationFeatureValues>> {
            const localVarAxiosArgs = await FeatureServiceApiAxiosParamCreator(configuration).findAllFeatureAndFeatureValuesForEnvironmentsByApplication(id, filter, max, page, featureTypes, sortOrder, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get a list of all environments and features and their values that this user has access to
         * @param {string} id The id of the application to find
         * @param {string} key The key of the associated feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFeatureValuesByApplicationForKey(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureEnvironment>>> {
            const localVarAxiosArgs = await FeatureServiceApiAxiosParamCreator(configuration).getAllFeatureValuesByApplicationForKey(id, key, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get all features available in this application
         * @param {string} id The id of the application to find
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllFeaturesForApplication(id: string, includeMetaData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Feature>>> {
            const localVarAxiosArgs = await FeatureServiceApiAxiosParamCreator(configuration).getAllFeaturesForApplication(id, includeMetaData, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * get an individual feature
         * @param {string} id The id of the application to find
         * @param {string} key The named unique key of the associated feature
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatureByKey(id: string, key: string, includeMetaData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Feature>> {
            const localVarAxiosArgs = await FeatureServiceApiAxiosParamCreator(configuration).getFeatureByKey(id, key, includeMetaData, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a list of all environments and features and their values that this user has access to
         * @param {string} id The id of the application to find
         * @param {string} key The key of the associated feature
         * @param {Array<FeatureValue>} featureValue 
         * @param {boolean} [removeValuesNotPassed] The id of the application to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAllFeatureValuesByApplicationForKey(id: string, key: string, featureValue: Array<FeatureValue>, removeValuesNotPassed?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureEnvironment>>> {
            const localVarAxiosArgs = await FeatureServiceApiAxiosParamCreator(configuration).updateAllFeatureValuesByApplicationForKey(id, key, featureValue, removeValuesNotPassed, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * updates all named features in this application, returns all features.
         * @param {string} id The id of the application to find
         * @param {string} key The named unique key of the associated feature
         * @param {Feature} feature 
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFeatureForApplication(id: string, key: string, feature: Feature, includeMetaData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Feature>>> {
            const localVarAxiosArgs = await FeatureServiceApiAxiosParamCreator(configuration).updateFeatureForApplication(id, key, feature, includeMetaData, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FeatureServiceApi - factory interface
 * @export
 */
export const FeatureServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * add a new feature to this application, returns all features.
         * @param {string} id The id of the application to find
         * @param {Feature} feature 
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeaturesForApplication(id: string, feature: Feature, includeMetaData?: boolean, options?: any): AxiosPromise<Array<Feature>> {
            return FeatureServiceApiFp(configuration).createFeaturesForApplication(id, feature, includeMetaData, options).then((request) => request(axios, basePath));
        },
        /**
         * updates all named features in this application, returns all features.
         * @param {string} id The id of the application to find
         * @param {string} key The named unique key of the associated feature
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureForApplication(id: string, key: string, includeMetaData?: boolean, options?: any): AxiosPromise<Array<Feature>> {
            return FeatureServiceApiFp(configuration).deleteFeatureForApplication(id, key, includeMetaData, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all environments and features and their values that this user has access to
         * @param {string} id The id of the application to find
         * @param {string} [filter] A filter to apply to the features - partial match of key or description
         * @param {number} [max] The maximum number of features to get for this page
         * @param {number} [page] The page number of the results. 0 indexed.
         * @param {Array<FeatureValueType>} [featureTypes] 
         * @param {SortOrder} [sortOrder] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllFeatureAndFeatureValuesForEnvironmentsByApplication(id: string, filter?: string, max?: number, page?: number, featureTypes?: Array<FeatureValueType>, sortOrder?: SortOrder, options?: any): AxiosPromise<ApplicationFeatureValues> {
            return FeatureServiceApiFp(configuration).findAllFeatureAndFeatureValuesForEnvironmentsByApplication(id, filter, max, page, featureTypes, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of all environments and features and their values that this user has access to
         * @param {string} id The id of the application to find
         * @param {string} key The key of the associated feature
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFeatureValuesByApplicationForKey(id: string, key: string, options?: any): AxiosPromise<Array<FeatureEnvironment>> {
            return FeatureServiceApiFp(configuration).getAllFeatureValuesByApplicationForKey(id, key, options).then((request) => request(axios, basePath));
        },
        /**
         * get all features available in this application
         * @param {string} id The id of the application to find
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllFeaturesForApplication(id: string, includeMetaData?: boolean, options?: any): AxiosPromise<Array<Feature>> {
            return FeatureServiceApiFp(configuration).getAllFeaturesForApplication(id, includeMetaData, options).then((request) => request(axios, basePath));
        },
        /**
         * get an individual feature
         * @param {string} id The id of the application to find
         * @param {string} key The named unique key of the associated feature
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureByKey(id: string, key: string, includeMetaData?: boolean, options?: any): AxiosPromise<Feature> {
            return FeatureServiceApiFp(configuration).getFeatureByKey(id, key, includeMetaData, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a list of all environments and features and their values that this user has access to
         * @param {string} id The id of the application to find
         * @param {string} key The key of the associated feature
         * @param {Array<FeatureValue>} featureValue 
         * @param {boolean} [removeValuesNotPassed] The id of the application to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAllFeatureValuesByApplicationForKey(id: string, key: string, featureValue: Array<FeatureValue>, removeValuesNotPassed?: boolean, options?: any): AxiosPromise<Array<FeatureEnvironment>> {
            return FeatureServiceApiFp(configuration).updateAllFeatureValuesByApplicationForKey(id, key, featureValue, removeValuesNotPassed, options).then((request) => request(axios, basePath));
        },
        /**
         * updates all named features in this application, returns all features.
         * @param {string} id The id of the application to find
         * @param {string} key The named unique key of the associated feature
         * @param {Feature} feature 
         * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeatureForApplication(id: string, key: string, feature: Feature, includeMetaData?: boolean, options?: any): AxiosPromise<Array<Feature>> {
            return FeatureServiceApiFp(configuration).updateFeatureForApplication(id, key, feature, includeMetaData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeatureServiceApi - object-oriented interface
 * @export
 * @class FeatureServiceApi
 * @extends {BaseAPI}
 */
export class FeatureServiceApi extends BaseAPI {
    /**
     * add a new feature to this application, returns all features.
     * @param {string} id The id of the application to find
     * @param {Feature} feature 
     * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureServiceApi
     */
    public createFeaturesForApplication(id: string, feature: Feature, includeMetaData?: boolean, options?: any): AxiosPromise<Array<Feature>> {
        return FeatureServiceApiFp(this.configuration).createFeaturesForApplication(id, feature, includeMetaData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * updates all named features in this application, returns all features.
     * @param {string} id The id of the application to find
     * @param {string} key The named unique key of the associated feature
     * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureServiceApi
     */
    public deleteFeatureForApplication(id: string, key: string, includeMetaData?: boolean, options?: any): AxiosPromise<Array<Feature>> {
        return FeatureServiceApiFp(this.configuration).deleteFeatureForApplication(id, key, includeMetaData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all environments and features and their values that this user has access to
     * @param {string} id The id of the application to find
     * @param {string} [filter] A filter to apply to the features - partial match of key or description
     * @param {number} [max] The maximum number of features to get for this page
     * @param {number} [page] The page number of the results. 0 indexed.
     * @param {Array<FeatureValueType>} [featureTypes] 
     * @param {SortOrder} [sortOrder] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureServiceApi
     */
    public findAllFeatureAndFeatureValuesForEnvironmentsByApplication(id: string, filter?: string, max?: number, page?: number, featureTypes?: Array<FeatureValueType>, sortOrder?: SortOrder, options?: any): AxiosPromise<ApplicationFeatureValues> {
        return FeatureServiceApiFp(this.configuration).findAllFeatureAndFeatureValuesForEnvironmentsByApplication(id, filter, max, page, featureTypes, sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of all environments and features and their values that this user has access to
     * @param {string} id The id of the application to find
     * @param {string} key The key of the associated feature
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureServiceApi
     */
    public getAllFeatureValuesByApplicationForKey(id: string, key: string, options?: any): AxiosPromise<Array<FeatureEnvironment>> {
        return FeatureServiceApiFp(this.configuration).getAllFeatureValuesByApplicationForKey(id, key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get all features available in this application
     * @param {string} id The id of the application to find
     * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureServiceApi
     */
    public getAllFeaturesForApplication(id: string, includeMetaData?: boolean, options?: any): AxiosPromise<Array<Feature>> {
        return FeatureServiceApiFp(this.configuration).getAllFeaturesForApplication(id, includeMetaData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * get an individual feature
     * @param {string} id The id of the application to find
     * @param {string} key The named unique key of the associated feature
     * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureServiceApi
     */
    public getFeatureByKey(id: string, key: string, includeMetaData?: boolean, options?: any): AxiosPromise<Feature> {
        return FeatureServiceApiFp(this.configuration).getFeatureByKey(id, key, includeMetaData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a list of all environments and features and their values that this user has access to
     * @param {string} id The id of the application to find
     * @param {string} key The key of the associated feature
     * @param {Array<FeatureValue>} featureValue 
     * @param {boolean} [removeValuesNotPassed] The id of the application to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureServiceApi
     */
    public updateAllFeatureValuesByApplicationForKey(id: string, key: string, featureValue: Array<FeatureValue>, removeValuesNotPassed?: boolean, options?: any): AxiosPromise<Array<FeatureEnvironment>> {
        return FeatureServiceApiFp(this.configuration).updateAllFeatureValuesByApplicationForKey(id, key, featureValue, removeValuesNotPassed, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * updates all named features in this application, returns all features.
     * @param {string} id The id of the application to find
     * @param {string} key The named unique key of the associated feature
     * @param {Feature} feature 
     * @param {boolean} [includeMetaData] Include the metadata in the returned feature objects. Can be large.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureServiceApi
     */
    public updateFeatureForApplication(id: string, key: string, feature: Feature, includeMetaData?: boolean, options?: any): AxiosPromise<Array<Feature>> {
        return FeatureServiceApiFp(this.configuration).updateFeatureForApplication(id, key, feature, includeMetaData, options).then((request) => request(this.axios, this.basePath));
    }
}
