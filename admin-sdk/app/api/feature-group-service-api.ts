/* tslint:disable */
/* eslint-disable */
/**
 * ManagementResourceApi
 * This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FeatureGroup } from '../models';
// @ts-ignore
import { FeatureGroupCreate } from '../models';
// @ts-ignore
import { FeatureGroupFeature } from '../models';
// @ts-ignore
import { FeatureGroupList } from '../models';
// @ts-ignore
import { FeatureGroupListGroup } from '../models';
// @ts-ignore
import { FeatureGroupUpdate } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
// @ts-ignore
import { ObjectSerializer } from '../models';
/**
 * FeatureGroupServiceApi - axios parameter creator
 * @export
 */
export const FeatureGroupServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application to find
         * @param {FeatureGroupCreate} featureGroupCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureGroup: async (appId: string, featureGroupCreate: FeatureGroupCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling createFeatureGroup.');
            }
            // verify required parameter 'featureGroupCreate' is not null or undefined
            if (featureGroupCreate === null || featureGroupCreate === undefined) {
                throw new RequiredError('featureGroupCreate','Required parameter featureGroupCreate was null or undefined when calling createFeatureGroup.');
            }
            const localVarPath = `/mr-api/application/{appId}/feature-groups`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof featureGroupCreate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(featureGroupCreate !== undefined ? ObjectSerializer.serialize(featureGroupCreate, 'FeatureGroupCreate') : {}) : (featureGroupCreate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete this feature group
         * @param {string} appId The id of the application
         * @param {string} fgId The id of the feature group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureGroup: async (appId: string, fgId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling deleteFeatureGroup.');
            }
            // verify required parameter 'fgId' is not null or undefined
            if (fgId === null || fgId === undefined) {
                throw new RequiredError('fgId','Required parameter fgId was null or undefined when calling deleteFeatureGroup.');
            }
            const localVarPath = `/mr-api/application/{appId}/feature-groups/{fgId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"fgId"}}`, encodeURIComponent(String(fgId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application
         * @param {string} fgId The id of the feature group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureGroup: async (appId: string, fgId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling getFeatureGroup.');
            }
            // verify required parameter 'fgId' is not null or undefined
            if (fgId === null || fgId === undefined) {
                throw new RequiredError('fgId','Required parameter fgId was null or undefined when calling getFeatureGroup.');
            }
            const localVarPath = `/mr-api/application/{appId}/feature-groups/{fgId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"fgId"}}`, encodeURIComponent(String(fgId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application
         * @param {string} envId The id of the feature group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureGroupFeatures: async (appId: string, envId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling getFeatureGroupFeatures.');
            }
            // verify required parameter 'envId' is not null or undefined
            if (envId === null || envId === undefined) {
                throw new RequiredError('envId','Required parameter envId was null or undefined when calling getFeatureGroupFeatures.');
            }
            const localVarPath = `/mr-api/application/{appId}/feature-groups/environment/{envId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"envId"}}`, encodeURIComponent(String(envId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application to find
         * @param {string} [filter] A filter to apply to the features - partial match of key or description
         * @param {number} [max] The maximum number of features to get for this page
         * @param {number} [page] The page number of the results. 0 indexed.
         * @param {SortOrder} [sortOrder] 
         * @param {string} [environmentId] Match based on environment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeatureGroups: async (appId: string, filter?: string, max?: number, page?: number, sortOrder?: SortOrder, environmentId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling listFeatureGroups.');
            }
            const localVarPath = `/mr-api/application/{appId}/feature-groups`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (max !== undefined) {
                localVarQueryParameter['max'] = max;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (environmentId !== undefined) {
                localVarQueryParameter['environmentId'] = environmentId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application to find
         * @param {FeatureGroupUpdate} featureGroupUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeatureGroup: async (appId: string, featureGroupUpdate: FeatureGroupUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling updateFeatureGroup.');
            }
            // verify required parameter 'featureGroupUpdate' is not null or undefined
            if (featureGroupUpdate === null || featureGroupUpdate === undefined) {
                throw new RequiredError('featureGroupUpdate','Required parameter featureGroupUpdate was null or undefined when calling updateFeatureGroup.');
            }
            const localVarPath = `/mr-api/application/{appId}/feature-groups`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof featureGroupUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(featureGroupUpdate !== undefined ? ObjectSerializer.serialize(featureGroupUpdate, 'FeatureGroupUpdate') : {}) : (featureGroupUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeatureGroupServiceApi - functional programming interface
 * @export
 */
export const FeatureGroupServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application to find
         * @param {FeatureGroupCreate} featureGroupCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFeatureGroup(appId: string, featureGroupCreate: FeatureGroupCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureGroupListGroup>> {
            const localVarAxiosArgs = await FeatureGroupServiceApiAxiosParamCreator(configuration).createFeatureGroup(appId, featureGroupCreate, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete this feature group
         * @param {string} appId The id of the application
         * @param {string} fgId The id of the feature group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteFeatureGroup(appId: string, fgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FeatureGroupServiceApiAxiosParamCreator(configuration).deleteFeatureGroup(appId, fgId, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application
         * @param {string} fgId The id of the feature group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatureGroup(appId: string, fgId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureGroup>> {
            const localVarAxiosArgs = await FeatureGroupServiceApiAxiosParamCreator(configuration).getFeatureGroup(appId, fgId, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application
         * @param {string} envId The id of the feature group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatureGroupFeatures(appId: string, envId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FeatureGroupFeature>>> {
            const localVarAxiosArgs = await FeatureGroupServiceApiAxiosParamCreator(configuration).getFeatureGroupFeatures(appId, envId, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application to find
         * @param {string} [filter] A filter to apply to the features - partial match of key or description
         * @param {number} [max] The maximum number of features to get for this page
         * @param {number} [page] The page number of the results. 0 indexed.
         * @param {SortOrder} [sortOrder] 
         * @param {string} [environmentId] Match based on environment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeatureGroups(appId: string, filter?: string, max?: number, page?: number, sortOrder?: SortOrder, environmentId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureGroupList>> {
            const localVarAxiosArgs = await FeatureGroupServiceApiAxiosParamCreator(configuration).listFeatureGroups(appId, filter, max, page, sortOrder, environmentId, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application to find
         * @param {FeatureGroupUpdate} featureGroupUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFeatureGroup(appId: string, featureGroupUpdate: FeatureGroupUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureGroup>> {
            const localVarAxiosArgs = await FeatureGroupServiceApiAxiosParamCreator(configuration).updateFeatureGroup(appId, featureGroupUpdate, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FeatureGroupServiceApi - factory interface
 * @export
 */
export const FeatureGroupServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application to find
         * @param {FeatureGroupCreate} featureGroupCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFeatureGroup(appId: string, featureGroupCreate: FeatureGroupCreate, options?: any): AxiosPromise<FeatureGroupListGroup> {
            return FeatureGroupServiceApiFp(configuration).createFeatureGroup(appId, featureGroupCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete this feature group
         * @param {string} appId The id of the application
         * @param {string} fgId The id of the feature group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteFeatureGroup(appId: string, fgId: string, options?: any): AxiosPromise<void> {
            return FeatureGroupServiceApiFp(configuration).deleteFeatureGroup(appId, fgId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application
         * @param {string} fgId The id of the feature group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureGroup(appId: string, fgId: string, options?: any): AxiosPromise<FeatureGroup> {
            return FeatureGroupServiceApiFp(configuration).getFeatureGroup(appId, fgId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application
         * @param {string} envId The id of the feature group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureGroupFeatures(appId: string, envId: string, options?: any): AxiosPromise<Array<FeatureGroupFeature>> {
            return FeatureGroupServiceApiFp(configuration).getFeatureGroupFeatures(appId, envId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application to find
         * @param {string} [filter] A filter to apply to the features - partial match of key or description
         * @param {number} [max] The maximum number of features to get for this page
         * @param {number} [page] The page number of the results. 0 indexed.
         * @param {SortOrder} [sortOrder] 
         * @param {string} [environmentId] Match based on environment id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeatureGroups(appId: string, filter?: string, max?: number, page?: number, sortOrder?: SortOrder, environmentId?: string, options?: any): AxiosPromise<FeatureGroupList> {
            return FeatureGroupServiceApiFp(configuration).listFeatureGroups(appId, filter, max, page, sortOrder, environmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get feature groups for this application
         * @param {string} appId The id of the application to find
         * @param {FeatureGroupUpdate} featureGroupUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFeatureGroup(appId: string, featureGroupUpdate: FeatureGroupUpdate, options?: any): AxiosPromise<FeatureGroup> {
            return FeatureGroupServiceApiFp(configuration).updateFeatureGroup(appId, featureGroupUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeatureGroupServiceApi - object-oriented interface
 * @export
 * @class FeatureGroupServiceApi
 * @extends {BaseAPI}
 */
export class FeatureGroupServiceApi extends BaseAPI {
    /**
     * Get feature groups for this application
     * @param {string} appId The id of the application to find
     * @param {FeatureGroupCreate} featureGroupCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureGroupServiceApi
     */
    public createFeatureGroup(appId: string, featureGroupCreate: FeatureGroupCreate, options?: any): AxiosPromise<FeatureGroupListGroup> {
        return FeatureGroupServiceApiFp(this.configuration).createFeatureGroup(appId, featureGroupCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete this feature group
     * @param {string} appId The id of the application
     * @param {string} fgId The id of the feature group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureGroupServiceApi
     */
    public deleteFeatureGroup(appId: string, fgId: string, options?: any): AxiosPromise<void> {
        return FeatureGroupServiceApiFp(this.configuration).deleteFeatureGroup(appId, fgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get feature groups for this application
     * @param {string} appId The id of the application
     * @param {string} fgId The id of the feature group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureGroupServiceApi
     */
    public getFeatureGroup(appId: string, fgId: string, options?: any): AxiosPromise<FeatureGroup> {
        return FeatureGroupServiceApiFp(this.configuration).getFeatureGroup(appId, fgId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get feature groups for this application
     * @param {string} appId The id of the application
     * @param {string} envId The id of the feature group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureGroupServiceApi
     */
    public getFeatureGroupFeatures(appId: string, envId: string, options?: any): AxiosPromise<Array<FeatureGroupFeature>> {
        return FeatureGroupServiceApiFp(this.configuration).getFeatureGroupFeatures(appId, envId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get feature groups for this application
     * @param {string} appId The id of the application to find
     * @param {string} [filter] A filter to apply to the features - partial match of key or description
     * @param {number} [max] The maximum number of features to get for this page
     * @param {number} [page] The page number of the results. 0 indexed.
     * @param {SortOrder} [sortOrder] 
     * @param {string} [environmentId] Match based on environment id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureGroupServiceApi
     */
    public listFeatureGroups(appId: string, filter?: string, max?: number, page?: number, sortOrder?: SortOrder, environmentId?: string, options?: any): AxiosPromise<FeatureGroupList> {
        return FeatureGroupServiceApiFp(this.configuration).listFeatureGroups(appId, filter, max, page, sortOrder, environmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get feature groups for this application
     * @param {string} appId The id of the application to find
     * @param {FeatureGroupUpdate} featureGroupUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureGroupServiceApi
     */
    public updateFeatureGroup(appId: string, featureGroupUpdate: FeatureGroupUpdate, options?: any): AxiosPromise<FeatureGroup> {
        return FeatureGroupServiceApiFp(this.configuration).updateFeatureGroup(appId, featureGroupUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}
