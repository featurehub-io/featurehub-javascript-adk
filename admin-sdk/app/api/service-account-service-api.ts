/* tslint:disable */
/* eslint-disable */
/**
 * ManagementResourceApi
 * This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateServiceAccount } from '../models';
// @ts-ignore
import { ResetApiKeyType } from '../models';
// @ts-ignore
import { ServiceAccount } from '../models';
// @ts-ignore
import { ObjectSerializer } from '../models';
/**
 * ServiceAccountServiceApi - axios parameter creator
 * @export
 */
export const ServiceAccountServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a new service account
         * @param {string} id the portfolio this service account belongs to
         * @param {CreateServiceAccount} createServiceAccount 
         * @param {boolean} [includePermissions] include permissions in return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceAccountInPortfolio: async (id: string, createServiceAccount: CreateServiceAccount, includePermissions?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createServiceAccountInPortfolio.');
            }
            // verify required parameter 'createServiceAccount' is not null or undefined
            if (createServiceAccount === null || createServiceAccount === undefined) {
                throw new RequiredError('createServiceAccount','Required parameter createServiceAccount was null or undefined when calling createServiceAccountInPortfolio.');
            }
            const localVarPath = `/mr-api/portfolio/{id}/service-account`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includePermissions !== undefined) {
                localVarQueryParameter['includePermissions'] = includePermissions;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createServiceAccount !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createServiceAccount !== undefined ? ObjectSerializer.serialize(createServiceAccount, 'CreateServiceAccount') : {}) : (createServiceAccount || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete this service account, cascade removes all permissions
         * @param {string} id the id for the service account to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');
            }
            const localVarPath = `/mr-api/service-account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get service account by id or \'self\' if authenticated as this service account
         * @param {string} id the id for the service account to get
         * @param {boolean} [includePermissions] include permissions in return
         * @param {string} [byApplicationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAccount: async (id: string, includePermissions?: boolean, byApplicationId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getServiceAccount.');
            }
            const localVarPath = `/mr-api/service-account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includePermissions !== undefined) {
                localVarQueryParameter['includePermissions'] = includePermissions;
            }

            if (byApplicationId !== undefined) {
                localVarQueryParameter['byApplicationId'] = byApplicationId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Causes a new API Key to be generated. Ensure you confirm this with the user.
         * @param {string} id the id for the service account to get
         * @param {ResetApiKeyType} [apiKeyType] Type of the API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetApiKey: async (id: string, apiKeyType?: ResetApiKeyType, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling resetApiKey.');
            }
            const localVarPath = `/mr-api/service-account/{id}/reset-api-key`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (apiKeyType !== undefined) {
                localVarQueryParameter['apiKeyType'] = apiKeyType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of all service accounts this user can see
         * @param {string} id the portfolio this service account belongs to
         * @param {boolean} [includePermissions] include permissions in return
         * @param {string} [filter] include environments for each account
         * @param {string} [applicationId] Application ID to filter on
         * @param {boolean} [includeSdkUrls] Include the SDKs for environments the user has access to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchServiceAccountsInPortfolio: async (id: string, includePermissions?: boolean, filter?: string, applicationId?: string, includeSdkUrls?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling searchServiceAccountsInPortfolio.');
            }
            const localVarPath = `/mr-api/portfolio/{id}/service-account`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includePermissions !== undefined) {
                localVarQueryParameter['includePermissions'] = includePermissions;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (applicationId !== undefined) {
                localVarQueryParameter['applicationId'] = applicationId;
            }

            if (includeSdkUrls !== undefined) {
                localVarQueryParameter['includeSdkUrls'] = includeSdkUrls;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update this service account, overwiting any attached environment permissions this user has access to
         * @param {string} id the id for the service account to get
         * @param {ServiceAccount} serviceAccount 
         * @param {boolean} [includePermissions] include permissions in return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceAccount: async (id: string, serviceAccount: ServiceAccount, includePermissions?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateServiceAccount.');
            }
            // verify required parameter 'serviceAccount' is not null or undefined
            if (serviceAccount === null || serviceAccount === undefined) {
                throw new RequiredError('serviceAccount','Required parameter serviceAccount was null or undefined when calling updateServiceAccount.');
            }
            const localVarPath = `/mr-api/service-account/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includePermissions !== undefined) {
                localVarQueryParameter['includePermissions'] = includePermissions;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof serviceAccount !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccount !== undefined ? ObjectSerializer.serialize(serviceAccount, 'ServiceAccount') : {}) : (serviceAccount || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update this service account, overwiting any attached environment permissions this user has access to
         * @param {string} id the portfolio this service account belongs to
         * @param {ServiceAccount} serviceAccount 
         * @param {boolean} [includePermissions] include permissions in return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceAccountOnPortfolio: async (id: string, serviceAccount: ServiceAccount, includePermissions?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateServiceAccountOnPortfolio.');
            }
            // verify required parameter 'serviceAccount' is not null or undefined
            if (serviceAccount === null || serviceAccount === undefined) {
                throw new RequiredError('serviceAccount','Required parameter serviceAccount was null or undefined when calling updateServiceAccountOnPortfolio.');
            }
            const localVarPath = `/mr-api/portfolio/{id}/service-account`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includePermissions !== undefined) {
                localVarQueryParameter['includePermissions'] = includePermissions;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof serviceAccount !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccount !== undefined ? ObjectSerializer.serialize(serviceAccount, 'ServiceAccount') : {}) : (serviceAccount || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceAccountServiceApi - functional programming interface
 * @export
 */
export const ServiceAccountServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add a new service account
         * @param {string} id the portfolio this service account belongs to
         * @param {CreateServiceAccount} createServiceAccount 
         * @param {boolean} [includePermissions] include permissions in return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServiceAccountInPortfolio(id: string, createServiceAccount: CreateServiceAccount, includePermissions?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {
            const localVarAxiosArgs = await ServiceAccountServiceApiAxiosParamCreator(configuration).createServiceAccountInPortfolio(id, createServiceAccount, includePermissions, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete this service account, cascade removes all permissions
         * @param {string} id the id for the service account to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await ServiceAccountServiceApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get service account by id or \'self\' if authenticated as this service account
         * @param {string} id the id for the service account to get
         * @param {boolean} [includePermissions] include permissions in return
         * @param {string} [byApplicationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceAccount(id: string, includePermissions?: boolean, byApplicationId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {
            const localVarAxiosArgs = await ServiceAccountServiceApiAxiosParamCreator(configuration).getServiceAccount(id, includePermissions, byApplicationId, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Causes a new API Key to be generated. Ensure you confirm this with the user.
         * @param {string} id the id for the service account to get
         * @param {ResetApiKeyType} [apiKeyType] Type of the API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetApiKey(id: string, apiKeyType?: ResetApiKeyType, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {
            const localVarAxiosArgs = await ServiceAccountServiceApiAxiosParamCreator(configuration).resetApiKey(id, apiKeyType, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get list of all service accounts this user can see
         * @param {string} id the portfolio this service account belongs to
         * @param {boolean} [includePermissions] include permissions in return
         * @param {string} [filter] include environments for each account
         * @param {string} [applicationId] Application ID to filter on
         * @param {boolean} [includeSdkUrls] Include the SDKs for environments the user has access to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchServiceAccountsInPortfolio(id: string, includePermissions?: boolean, filter?: string, applicationId?: string, includeSdkUrls?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ServiceAccount>>> {
            const localVarAxiosArgs = await ServiceAccountServiceApiAxiosParamCreator(configuration).searchServiceAccountsInPortfolio(id, includePermissions, filter, applicationId, includeSdkUrls, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update this service account, overwiting any attached environment permissions this user has access to
         * @param {string} id the id for the service account to get
         * @param {ServiceAccount} serviceAccount 
         * @param {boolean} [includePermissions] include permissions in return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateServiceAccount(id: string, serviceAccount: ServiceAccount, includePermissions?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {
            const localVarAxiosArgs = await ServiceAccountServiceApiAxiosParamCreator(configuration).updateServiceAccount(id, serviceAccount, includePermissions, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update this service account, overwiting any attached environment permissions this user has access to
         * @param {string} id the portfolio this service account belongs to
         * @param {ServiceAccount} serviceAccount 
         * @param {boolean} [includePermissions] include permissions in return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateServiceAccountOnPortfolio(id: string, serviceAccount: ServiceAccount, includePermissions?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {
            const localVarAxiosArgs = await ServiceAccountServiceApiAxiosParamCreator(configuration).updateServiceAccountOnPortfolio(id, serviceAccount, includePermissions, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ServiceAccountServiceApi - factory interface
 * @export
 */
export const ServiceAccountServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add a new service account
         * @param {string} id the portfolio this service account belongs to
         * @param {CreateServiceAccount} createServiceAccount 
         * @param {boolean} [includePermissions] include permissions in return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceAccountInPortfolio(id: string, createServiceAccount: CreateServiceAccount, includePermissions?: boolean, options?: any): AxiosPromise<ServiceAccount> {
            return ServiceAccountServiceApiFp(configuration).createServiceAccountInPortfolio(id, createServiceAccount, includePermissions, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete this service account, cascade removes all permissions
         * @param {string} id the id for the service account to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteServiceAccount(id: string, options?: any): AxiosPromise<boolean> {
            return ServiceAccountServiceApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get service account by id or \'self\' if authenticated as this service account
         * @param {string} id the id for the service account to get
         * @param {boolean} [includePermissions] include permissions in return
         * @param {string} [byApplicationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceAccount(id: string, includePermissions?: boolean, byApplicationId?: string, options?: any): AxiosPromise<ServiceAccount> {
            return ServiceAccountServiceApiFp(configuration).getServiceAccount(id, includePermissions, byApplicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Causes a new API Key to be generated. Ensure you confirm this with the user.
         * @param {string} id the id for the service account to get
         * @param {ResetApiKeyType} [apiKeyType] Type of the API key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetApiKey(id: string, apiKeyType?: ResetApiKeyType, options?: any): AxiosPromise<ServiceAccount> {
            return ServiceAccountServiceApiFp(configuration).resetApiKey(id, apiKeyType, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of all service accounts this user can see
         * @param {string} id the portfolio this service account belongs to
         * @param {boolean} [includePermissions] include permissions in return
         * @param {string} [filter] include environments for each account
         * @param {string} [applicationId] Application ID to filter on
         * @param {boolean} [includeSdkUrls] Include the SDKs for environments the user has access to
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchServiceAccountsInPortfolio(id: string, includePermissions?: boolean, filter?: string, applicationId?: string, includeSdkUrls?: boolean, options?: any): AxiosPromise<Array<ServiceAccount>> {
            return ServiceAccountServiceApiFp(configuration).searchServiceAccountsInPortfolio(id, includePermissions, filter, applicationId, includeSdkUrls, options).then((request) => request(axios, basePath));
        },
        /**
         * Update this service account, overwiting any attached environment permissions this user has access to
         * @param {string} id the id for the service account to get
         * @param {ServiceAccount} serviceAccount 
         * @param {boolean} [includePermissions] include permissions in return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceAccount(id: string, serviceAccount: ServiceAccount, includePermissions?: boolean, options?: any): AxiosPromise<ServiceAccount> {
            return ServiceAccountServiceApiFp(configuration).updateServiceAccount(id, serviceAccount, includePermissions, options).then((request) => request(axios, basePath));
        },
        /**
         * Update this service account, overwiting any attached environment permissions this user has access to
         * @param {string} id the portfolio this service account belongs to
         * @param {ServiceAccount} serviceAccount 
         * @param {boolean} [includePermissions] include permissions in return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateServiceAccountOnPortfolio(id: string, serviceAccount: ServiceAccount, includePermissions?: boolean, options?: any): AxiosPromise<ServiceAccount> {
            return ServiceAccountServiceApiFp(configuration).updateServiceAccountOnPortfolio(id, serviceAccount, includePermissions, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ServiceAccountServiceApi - object-oriented interface
 * @export
 * @class ServiceAccountServiceApi
 * @extends {BaseAPI}
 */
export class ServiceAccountServiceApi extends BaseAPI {
    /**
     * Add a new service account
     * @param {string} id the portfolio this service account belongs to
     * @param {CreateServiceAccount} createServiceAccount 
     * @param {boolean} [includePermissions] include permissions in return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountServiceApi
     */
    public createServiceAccountInPortfolio(id: string, createServiceAccount: CreateServiceAccount, includePermissions?: boolean, options?: any): AxiosPromise<ServiceAccount> {
        return ServiceAccountServiceApiFp(this.configuration).createServiceAccountInPortfolio(id, createServiceAccount, includePermissions, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete this service account, cascade removes all permissions
     * @param {string} id the id for the service account to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountServiceApi
     */
    public deleteServiceAccount(id: string, options?: any): AxiosPromise<boolean> {
        return ServiceAccountServiceApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get service account by id or \'self\' if authenticated as this service account
     * @param {string} id the id for the service account to get
     * @param {boolean} [includePermissions] include permissions in return
     * @param {string} [byApplicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountServiceApi
     */
    public getServiceAccount(id: string, includePermissions?: boolean, byApplicationId?: string, options?: any): AxiosPromise<ServiceAccount> {
        return ServiceAccountServiceApiFp(this.configuration).getServiceAccount(id, includePermissions, byApplicationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Causes a new API Key to be generated. Ensure you confirm this with the user.
     * @param {string} id the id for the service account to get
     * @param {ResetApiKeyType} [apiKeyType] Type of the API key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountServiceApi
     */
    public resetApiKey(id: string, apiKeyType?: ResetApiKeyType, options?: any): AxiosPromise<ServiceAccount> {
        return ServiceAccountServiceApiFp(this.configuration).resetApiKey(id, apiKeyType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get list of all service accounts this user can see
     * @param {string} id the portfolio this service account belongs to
     * @param {boolean} [includePermissions] include permissions in return
     * @param {string} [filter] include environments for each account
     * @param {string} [applicationId] Application ID to filter on
     * @param {boolean} [includeSdkUrls] Include the SDKs for environments the user has access to
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountServiceApi
     */
    public searchServiceAccountsInPortfolio(id: string, includePermissions?: boolean, filter?: string, applicationId?: string, includeSdkUrls?: boolean, options?: any): AxiosPromise<Array<ServiceAccount>> {
        return ServiceAccountServiceApiFp(this.configuration).searchServiceAccountsInPortfolio(id, includePermissions, filter, applicationId, includeSdkUrls, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update this service account, overwiting any attached environment permissions this user has access to
     * @param {string} id the id for the service account to get
     * @param {ServiceAccount} serviceAccount 
     * @param {boolean} [includePermissions] include permissions in return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountServiceApi
     */
    public updateServiceAccount(id: string, serviceAccount: ServiceAccount, includePermissions?: boolean, options?: any): AxiosPromise<ServiceAccount> {
        return ServiceAccountServiceApiFp(this.configuration).updateServiceAccount(id, serviceAccount, includePermissions, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update this service account, overwiting any attached environment permissions this user has access to
     * @param {string} id the portfolio this service account belongs to
     * @param {ServiceAccount} serviceAccount 
     * @param {boolean} [includePermissions] include permissions in return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceAccountServiceApi
     */
    public updateServiceAccountOnPortfolio(id: string, serviceAccount: ServiceAccount, includePermissions?: boolean, options?: any): AxiosPromise<ServiceAccount> {
        return ServiceAccountServiceApiFp(this.configuration).updateServiceAccountOnPortfolio(id, serviceAccount, includePermissions, options).then((request) => request(this.axios, this.basePath));
    }
}
