/* tslint:disable */
/* eslint-disable */
/**
 * ManagementResourceApi
 * This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateEnvironment } from '../models';
// @ts-ignore
import { Environment } from '../models';
// @ts-ignore
import { EnvironmentSortOrder } from '../models';
// @ts-ignore
import { UpdateEnvironmentV2 } from '../models';
// @ts-ignore
import { ObjectSerializer } from '../models';
/**
 * EnvironmentServiceApi - axios parameter creator
 * @export
 */
export const EnvironmentServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new environment - this is mounted at the wrong REST endpoint and is not assured to be maintained
         * @param {string} id The id of the application to find
         * @param {CreateEnvironment} createEnvironment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironment: async (id: string, createEnvironment: CreateEnvironment, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createEnvironment.');
            }
            // verify required parameter 'createEnvironment' is not null or undefined
            if (createEnvironment === null || createEnvironment === undefined) {
                throw new RequiredError('createEnvironment','Required parameter createEnvironment was null or undefined when calling createEnvironment.');
            }
            const localVarPath = `/mr-api/application/{id}/permissions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createEnvironment !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createEnvironment !== undefined ? ObjectSerializer.serialize(createEnvironment, 'CreateEnvironment') : {}) : (createEnvironment || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new environment
         * @param {string} id The id of the application to find
         * @param {CreateEnvironment} createEnvironment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironmentOnApplication: async (id: string, createEnvironment: CreateEnvironment, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createEnvironmentOnApplication.');
            }
            // verify required parameter 'createEnvironment' is not null or undefined
            if (createEnvironment === null || createEnvironment === undefined) {
                throw new RequiredError('createEnvironment','Required parameter createEnvironment was null or undefined when calling createEnvironmentOnApplication.');
            }
            const localVarPath = `/mr-api/application/{id}/environment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createEnvironment !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createEnvironment !== undefined ? ObjectSerializer.serialize(createEnvironment, 'CreateEnvironment') : {}) : (createEnvironment || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an environment
         * @param {string} eid The id of the environment to find
         * @param {boolean} [includeAcls] Include the acls attached to this environment
         * @param {boolean} [includeFeatures] Include the features attached to this environment
         * @param {boolean} [includeDetails] Include all environment details
         * @param {boolean} [decryptWebhookDetails] Decrypt all webhook env details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironment: async (eid: string, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, decryptWebhookDetails?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'eid' is not null or undefined
            if (eid === null || eid === undefined) {
                throw new RequiredError('eid','Required parameter eid was null or undefined when calling deleteEnvironment.');
            }
            const localVarPath = `/mr-api/environment/{eid}`
                .replace(`{${"eid"}}`, encodeURIComponent(String(eid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeAcls !== undefined) {
                localVarQueryParameter['includeAcls'] = includeAcls;
            }

            if (includeFeatures !== undefined) {
                localVarQueryParameter['includeFeatures'] = includeFeatures;
            }

            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }

            if (decryptWebhookDetails !== undefined) {
                localVarQueryParameter['decryptWebhookDetails'] = decryptWebhookDetails;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * this api is designed to update the ordering of environments. it will error on circular references or environments that don\'t exist.
         * @param {string} id The id of the application to find
         * @param {Array<Environment>} environment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentOrdering: async (id: string, environment: Array<Environment>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling environmentOrdering.');
            }
            // verify required parameter 'environment' is not null or undefined
            if (environment === null || environment === undefined) {
                throw new RequiredError('environment','Required parameter environment was null or undefined when calling environmentOrdering.');
            }
            const localVarPath = `/mr-api/application/{id}/environment-ordering`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof environment !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(environment !== undefined ? ObjectSerializer.serialize(environment, 'Array<Environment>') : {}) : (environment || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of environments.
         * @param {string} id The id of the application to find
         * @param {EnvironmentSortOrder} [order] how to order the results
         * @param {string} [filter] What to filter the results by
         * @param {boolean} [includeAcls] Include the acls attached to this environment
         * @param {boolean} [includeFeatures] Include the features attached to this environment
         * @param {boolean} [includeDetails] Include all environment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEnvironments: async (id: string, order?: EnvironmentSortOrder, filter?: string, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling findEnvironments.');
            }
            const localVarPath = `/mr-api/application/{id}/environment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (includeAcls !== undefined) {
                localVarQueryParameter['includeAcls'] = includeAcls;
            }

            if (includeFeatures !== undefined) {
                localVarQueryParameter['includeFeatures'] = includeFeatures;
            }

            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get environment
         * @param {string} eid The id of the environment to find
         * @param {boolean} [includeAcls] Include the acls attached to this environment
         * @param {boolean} [includeFeatures] Include the features attached to this environment
         * @param {boolean} [includeDetails] Include all environment details
         * @param {boolean} [decryptWebhookDetails] Decrypt all webhook env details
         * @param {boolean} [includeSdkUrl] include the sdk url
         * @param {boolean} [includeServiceAccounts] Include the service accounts attached to this environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironment: async (eid: string, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, decryptWebhookDetails?: boolean, includeSdkUrl?: boolean, includeServiceAccounts?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'eid' is not null or undefined
            if (eid === null || eid === undefined) {
                throw new RequiredError('eid','Required parameter eid was null or undefined when calling getEnvironment.');
            }
            const localVarPath = `/mr-api/environment/{eid}`
                .replace(`{${"eid"}}`, encodeURIComponent(String(eid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeAcls !== undefined) {
                localVarQueryParameter['includeAcls'] = includeAcls;
            }

            if (includeFeatures !== undefined) {
                localVarQueryParameter['includeFeatures'] = includeFeatures;
            }

            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }

            if (decryptWebhookDetails !== undefined) {
                localVarQueryParameter['decryptWebhookDetails'] = decryptWebhookDetails;
            }

            if (includeSdkUrl !== undefined) {
                localVarQueryParameter['includeSdkUrl'] = includeSdkUrl;
            }

            if (includeServiceAccounts !== undefined) {
                localVarQueryParameter['includeServiceAccounts'] = includeServiceAccounts;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an environment. Please use updateEnvironment
         * @param {string} eid The id of the environment to find
         * @param {Environment} environment 
         * @param {boolean} [includeAcls] Include the acls attached to this environment
         * @param {boolean} [includeFeatures] Include the features attached to this environment
         * @param {boolean} [includeDetails] Include all environment details
         * @param {boolean} [decryptWebhookDetails] Decrypt all webhook env details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironment: async (eid: string, environment: Environment, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, decryptWebhookDetails?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'eid' is not null or undefined
            if (eid === null || eid === undefined) {
                throw new RequiredError('eid','Required parameter eid was null or undefined when calling updateEnvironment.');
            }
            // verify required parameter 'environment' is not null or undefined
            if (environment === null || environment === undefined) {
                throw new RequiredError('environment','Required parameter environment was null or undefined when calling updateEnvironment.');
            }
            const localVarPath = `/mr-api/environment/{eid}`
                .replace(`{${"eid"}}`, encodeURIComponent(String(eid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeAcls !== undefined) {
                localVarQueryParameter['includeAcls'] = includeAcls;
            }

            if (includeFeatures !== undefined) {
                localVarQueryParameter['includeFeatures'] = includeFeatures;
            }

            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }

            if (decryptWebhookDetails !== undefined) {
                localVarQueryParameter['decryptWebhookDetails'] = decryptWebhookDetails;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof environment !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(environment !== undefined ? ObjectSerializer.serialize(environment, 'Environment') : {}) : (environment || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an environment
         * @param {string} id The id of the application to find
         * @param {UpdateEnvironmentV2} updateEnvironmentV2 
         * @param {boolean} [includeDetails] Include all environment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentOnApplication: async (id: string, updateEnvironmentV2: UpdateEnvironmentV2, includeDetails?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateEnvironmentOnApplication.');
            }
            // verify required parameter 'updateEnvironmentV2' is not null or undefined
            if (updateEnvironmentV2 === null || updateEnvironmentV2 === undefined) {
                throw new RequiredError('updateEnvironmentV2','Required parameter updateEnvironmentV2 was null or undefined when calling updateEnvironmentOnApplication.');
            }
            const localVarPath = `/mr-api/application/{id}/environment`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateEnvironmentV2 !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateEnvironmentV2 !== undefined ? ObjectSerializer.serialize(updateEnvironmentV2, 'UpdateEnvironmentV2') : {}) : (updateEnvironmentV2 || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EnvironmentServiceApi - functional programming interface
 * @export
 */
export const EnvironmentServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new environment - this is mounted at the wrong REST endpoint and is not assured to be maintained
         * @param {string} id The id of the application to find
         * @param {CreateEnvironment} createEnvironment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnvironment(id: string, createEnvironment: CreateEnvironment, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).createEnvironment(id, createEnvironment, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new environment
         * @param {string} id The id of the application to find
         * @param {CreateEnvironment} createEnvironment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEnvironmentOnApplication(id: string, createEnvironment: CreateEnvironment, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).createEnvironmentOnApplication(id, createEnvironment, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an environment
         * @param {string} eid The id of the environment to find
         * @param {boolean} [includeAcls] Include the acls attached to this environment
         * @param {boolean} [includeFeatures] Include the features attached to this environment
         * @param {boolean} [includeDetails] Include all environment details
         * @param {boolean} [decryptWebhookDetails] Decrypt all webhook env details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteEnvironment(eid: string, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, decryptWebhookDetails?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).deleteEnvironment(eid, includeAcls, includeFeatures, includeDetails, decryptWebhookDetails, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * this api is designed to update the ordering of environments. it will error on circular references or environments that don\'t exist.
         * @param {string} id The id of the application to find
         * @param {Array<Environment>} environment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async environmentOrdering(id: string, environment: Array<Environment>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Environment>>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).environmentOrdering(id, environment, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a list of environments.
         * @param {string} id The id of the application to find
         * @param {EnvironmentSortOrder} [order] how to order the results
         * @param {string} [filter] What to filter the results by
         * @param {boolean} [includeAcls] Include the acls attached to this environment
         * @param {boolean} [includeFeatures] Include the features attached to this environment
         * @param {boolean} [includeDetails] Include all environment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findEnvironments(id: string, order?: EnvironmentSortOrder, filter?: string, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Environment>>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).findEnvironments(id, order, filter, includeAcls, includeFeatures, includeDetails, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get environment
         * @param {string} eid The id of the environment to find
         * @param {boolean} [includeAcls] Include the acls attached to this environment
         * @param {boolean} [includeFeatures] Include the features attached to this environment
         * @param {boolean} [includeDetails] Include all environment details
         * @param {boolean} [decryptWebhookDetails] Decrypt all webhook env details
         * @param {boolean} [includeSdkUrl] include the sdk url
         * @param {boolean} [includeServiceAccounts] Include the service accounts attached to this environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEnvironment(eid: string, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, decryptWebhookDetails?: boolean, includeSdkUrl?: boolean, includeServiceAccounts?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).getEnvironment(eid, includeAcls, includeFeatures, includeDetails, decryptWebhookDetails, includeSdkUrl, includeServiceAccounts, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an environment. Please use updateEnvironment
         * @param {string} eid The id of the environment to find
         * @param {Environment} environment 
         * @param {boolean} [includeAcls] Include the acls attached to this environment
         * @param {boolean} [includeFeatures] Include the features attached to this environment
         * @param {boolean} [includeDetails] Include all environment details
         * @param {boolean} [decryptWebhookDetails] Decrypt all webhook env details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnvironment(eid: string, environment: Environment, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, decryptWebhookDetails?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).updateEnvironment(eid, environment, includeAcls, includeFeatures, includeDetails, decryptWebhookDetails, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an environment
         * @param {string} id The id of the application to find
         * @param {UpdateEnvironmentV2} updateEnvironmentV2 
         * @param {boolean} [includeDetails] Include all environment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEnvironmentOnApplication(id: string, updateEnvironmentV2: UpdateEnvironmentV2, includeDetails?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Environment>> {
            const localVarAxiosArgs = await EnvironmentServiceApiAxiosParamCreator(configuration).updateEnvironmentOnApplication(id, updateEnvironmentV2, includeDetails, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * EnvironmentServiceApi - factory interface
 * @export
 */
export const EnvironmentServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new environment - this is mounted at the wrong REST endpoint and is not assured to be maintained
         * @param {string} id The id of the application to find
         * @param {CreateEnvironment} createEnvironment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironment(id: string, createEnvironment: CreateEnvironment, options?: any): AxiosPromise<Environment> {
            return EnvironmentServiceApiFp(configuration).createEnvironment(id, createEnvironment, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new environment
         * @param {string} id The id of the application to find
         * @param {CreateEnvironment} createEnvironment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEnvironmentOnApplication(id: string, createEnvironment: CreateEnvironment, options?: any): AxiosPromise<Environment> {
            return EnvironmentServiceApiFp(configuration).createEnvironmentOnApplication(id, createEnvironment, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an environment
         * @param {string} eid The id of the environment to find
         * @param {boolean} [includeAcls] Include the acls attached to this environment
         * @param {boolean} [includeFeatures] Include the features attached to this environment
         * @param {boolean} [includeDetails] Include all environment details
         * @param {boolean} [decryptWebhookDetails] Decrypt all webhook env details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEnvironment(eid: string, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, decryptWebhookDetails?: boolean, options?: any): AxiosPromise<boolean> {
            return EnvironmentServiceApiFp(configuration).deleteEnvironment(eid, includeAcls, includeFeatures, includeDetails, decryptWebhookDetails, options).then((request) => request(axios, basePath));
        },
        /**
         * this api is designed to update the ordering of environments. it will error on circular references or environments that don\'t exist.
         * @param {string} id The id of the application to find
         * @param {Array<Environment>} environment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        environmentOrdering(id: string, environment: Array<Environment>, options?: any): AxiosPromise<Array<Environment>> {
            return EnvironmentServiceApiFp(configuration).environmentOrdering(id, environment, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of environments.
         * @param {string} id The id of the application to find
         * @param {EnvironmentSortOrder} [order] how to order the results
         * @param {string} [filter] What to filter the results by
         * @param {boolean} [includeAcls] Include the acls attached to this environment
         * @param {boolean} [includeFeatures] Include the features attached to this environment
         * @param {boolean} [includeDetails] Include all environment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findEnvironments(id: string, order?: EnvironmentSortOrder, filter?: string, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, options?: any): AxiosPromise<Array<Environment>> {
            return EnvironmentServiceApiFp(configuration).findEnvironments(id, order, filter, includeAcls, includeFeatures, includeDetails, options).then((request) => request(axios, basePath));
        },
        /**
         * Get environment
         * @param {string} eid The id of the environment to find
         * @param {boolean} [includeAcls] Include the acls attached to this environment
         * @param {boolean} [includeFeatures] Include the features attached to this environment
         * @param {boolean} [includeDetails] Include all environment details
         * @param {boolean} [decryptWebhookDetails] Decrypt all webhook env details
         * @param {boolean} [includeSdkUrl] include the sdk url
         * @param {boolean} [includeServiceAccounts] Include the service accounts attached to this environment
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEnvironment(eid: string, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, decryptWebhookDetails?: boolean, includeSdkUrl?: boolean, includeServiceAccounts?: boolean, options?: any): AxiosPromise<Environment> {
            return EnvironmentServiceApiFp(configuration).getEnvironment(eid, includeAcls, includeFeatures, includeDetails, decryptWebhookDetails, includeSdkUrl, includeServiceAccounts, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an environment. Please use updateEnvironment
         * @param {string} eid The id of the environment to find
         * @param {Environment} environment 
         * @param {boolean} [includeAcls] Include the acls attached to this environment
         * @param {boolean} [includeFeatures] Include the features attached to this environment
         * @param {boolean} [includeDetails] Include all environment details
         * @param {boolean} [decryptWebhookDetails] Decrypt all webhook env details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironment(eid: string, environment: Environment, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, decryptWebhookDetails?: boolean, options?: any): AxiosPromise<Environment> {
            return EnvironmentServiceApiFp(configuration).updateEnvironment(eid, environment, includeAcls, includeFeatures, includeDetails, decryptWebhookDetails, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an environment
         * @param {string} id The id of the application to find
         * @param {UpdateEnvironmentV2} updateEnvironmentV2 
         * @param {boolean} [includeDetails] Include all environment details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEnvironmentOnApplication(id: string, updateEnvironmentV2: UpdateEnvironmentV2, includeDetails?: boolean, options?: any): AxiosPromise<Environment> {
            return EnvironmentServiceApiFp(configuration).updateEnvironmentOnApplication(id, updateEnvironmentV2, includeDetails, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EnvironmentServiceApi - object-oriented interface
 * @export
 * @class EnvironmentServiceApi
 * @extends {BaseAPI}
 */
export class EnvironmentServiceApi extends BaseAPI {
    /**
     * Create a new environment - this is mounted at the wrong REST endpoint and is not assured to be maintained
     * @param {string} id The id of the application to find
     * @param {CreateEnvironment} createEnvironment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public createEnvironment(id: string, createEnvironment: CreateEnvironment, options?: any): AxiosPromise<Environment> {
        return EnvironmentServiceApiFp(this.configuration).createEnvironment(id, createEnvironment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new environment
     * @param {string} id The id of the application to find
     * @param {CreateEnvironment} createEnvironment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public createEnvironmentOnApplication(id: string, createEnvironment: CreateEnvironment, options?: any): AxiosPromise<Environment> {
        return EnvironmentServiceApiFp(this.configuration).createEnvironmentOnApplication(id, createEnvironment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an environment
     * @param {string} eid The id of the environment to find
     * @param {boolean} [includeAcls] Include the acls attached to this environment
     * @param {boolean} [includeFeatures] Include the features attached to this environment
     * @param {boolean} [includeDetails] Include all environment details
     * @param {boolean} [decryptWebhookDetails] Decrypt all webhook env details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public deleteEnvironment(eid: string, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, decryptWebhookDetails?: boolean, options?: any): AxiosPromise<boolean> {
        return EnvironmentServiceApiFp(this.configuration).deleteEnvironment(eid, includeAcls, includeFeatures, includeDetails, decryptWebhookDetails, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * this api is designed to update the ordering of environments. it will error on circular references or environments that don\'t exist.
     * @param {string} id The id of the application to find
     * @param {Array<Environment>} environment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public environmentOrdering(id: string, environment: Array<Environment>, options?: any): AxiosPromise<Array<Environment>> {
        return EnvironmentServiceApiFp(this.configuration).environmentOrdering(id, environment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of environments.
     * @param {string} id The id of the application to find
     * @param {EnvironmentSortOrder} [order] how to order the results
     * @param {string} [filter] What to filter the results by
     * @param {boolean} [includeAcls] Include the acls attached to this environment
     * @param {boolean} [includeFeatures] Include the features attached to this environment
     * @param {boolean} [includeDetails] Include all environment details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public findEnvironments(id: string, order?: EnvironmentSortOrder, filter?: string, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, options?: any): AxiosPromise<Array<Environment>> {
        return EnvironmentServiceApiFp(this.configuration).findEnvironments(id, order, filter, includeAcls, includeFeatures, includeDetails, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get environment
     * @param {string} eid The id of the environment to find
     * @param {boolean} [includeAcls] Include the acls attached to this environment
     * @param {boolean} [includeFeatures] Include the features attached to this environment
     * @param {boolean} [includeDetails] Include all environment details
     * @param {boolean} [decryptWebhookDetails] Decrypt all webhook env details
     * @param {boolean} [includeSdkUrl] include the sdk url
     * @param {boolean} [includeServiceAccounts] Include the service accounts attached to this environment
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public getEnvironment(eid: string, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, decryptWebhookDetails?: boolean, includeSdkUrl?: boolean, includeServiceAccounts?: boolean, options?: any): AxiosPromise<Environment> {
        return EnvironmentServiceApiFp(this.configuration).getEnvironment(eid, includeAcls, includeFeatures, includeDetails, decryptWebhookDetails, includeSdkUrl, includeServiceAccounts, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an environment. Please use updateEnvironment
     * @param {string} eid The id of the environment to find
     * @param {Environment} environment 
     * @param {boolean} [includeAcls] Include the acls attached to this environment
     * @param {boolean} [includeFeatures] Include the features attached to this environment
     * @param {boolean} [includeDetails] Include all environment details
     * @param {boolean} [decryptWebhookDetails] Decrypt all webhook env details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public updateEnvironment(eid: string, environment: Environment, includeAcls?: boolean, includeFeatures?: boolean, includeDetails?: boolean, decryptWebhookDetails?: boolean, options?: any): AxiosPromise<Environment> {
        return EnvironmentServiceApiFp(this.configuration).updateEnvironment(eid, environment, includeAcls, includeFeatures, includeDetails, decryptWebhookDetails, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an environment
     * @param {string} id The id of the application to find
     * @param {UpdateEnvironmentV2} updateEnvironmentV2 
     * @param {boolean} [includeDetails] Include all environment details
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EnvironmentServiceApi
     */
    public updateEnvironmentOnApplication(id: string, updateEnvironmentV2: UpdateEnvironmentV2, includeDetails?: boolean, options?: any): AxiosPromise<Environment> {
        return EnvironmentServiceApiFp(this.configuration).updateEnvironmentOnApplication(id, updateEnvironmentV2, includeDetails, options).then((request) => request(this.axios, this.basePath));
    }
}
