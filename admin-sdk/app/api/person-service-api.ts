/* tslint:disable */
/* eslint-disable */
/**
 * ManagementResourceApi
 * This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AdminServiceResetTokenResponse } from '../models';
// @ts-ignore
import { CreatePersonDetails } from '../models';
// @ts-ignore
import { Person } from '../models';
// @ts-ignore
import { PersonType } from '../models';
// @ts-ignore
import { RegistrationUrl } from '../models';
// @ts-ignore
import { SearchPersonResult } from '../models';
// @ts-ignore
import { SearchPersonSortBy } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
// @ts-ignore
import { UpdatePerson } from '../models';
// @ts-ignore
import { ObjectSerializer } from '../models';
/**
 * PersonServiceApi - axios parameter creator
 * @export
 */
export const PersonServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new person
         * @param {CreatePersonDetails} createPersonDetails 
         * @param {boolean} [includeGroups] Include groups in result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerson: async (createPersonDetails: CreatePersonDetails, includeGroups?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPersonDetails' is not null or undefined
            if (createPersonDetails === null || createPersonDetails === undefined) {
                throw new RequiredError('createPersonDetails','Required parameter createPersonDetails was null or undefined when calling createPerson.');
            }
            const localVarPath = `/mr-api/person`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeGroups !== undefined) {
                localVarQueryParameter['includeGroups'] = includeGroups;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createPersonDetails !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createPersonDetails !== undefined ? ObjectSerializer.serialize(createPersonDetails, 'CreatePersonDetails') : {}) : (createPersonDetails || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a person
         * @param {string} id The id of the person to find
         * @param {boolean} [includeGroups] Include groups in result
         * @param {boolean} [includeAcls] include acls for each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePerson: async (id: string, includeGroups?: boolean, includeAcls?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deletePerson.');
            }
            const localVarPath = `/mr-api/person/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeGroups !== undefined) {
                localVarQueryParameter['includeGroups'] = includeGroups;
            }

            if (includeAcls !== undefined) {
                localVarQueryParameter['includeAcls'] = includeAcls;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of matching people.
         * @param {boolean} [includeGroups] Include groups in result
         * @param {boolean} [countGroups] Return the number of groups
         * @param {SortOrder} [order] how to order the results
         * @param {string} [filter] What to filter the results by
         * @param {number} [startAt] Where in the results to start
         * @param {number} [pageSize] How many results to return
         * @param {boolean} [includeLastLoggedIn] Include last logged in timestamp
         * @param {boolean} [includeDeactivated] Include people who are no longer active
         * @param {Array<PersonType>} [personTypes] Filter by person types
         * @param {SearchPersonSortBy} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPeople: async (includeGroups?: boolean, countGroups?: boolean, order?: SortOrder, filter?: string, startAt?: number, pageSize?: number, includeLastLoggedIn?: boolean, includeDeactivated?: boolean, personTypes?: Array<PersonType>, sortBy?: SearchPersonSortBy, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mr-api/person`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeGroups !== undefined) {
                localVarQueryParameter['includeGroups'] = includeGroups;
            }

            if (countGroups !== undefined) {
                localVarQueryParameter['countGroups'] = countGroups;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (startAt !== undefined) {
                localVarQueryParameter['startAt'] = startAt;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (includeLastLoggedIn !== undefined) {
                localVarQueryParameter['includeLastLoggedIn'] = includeLastLoggedIn;
            }

            if (includeDeactivated !== undefined) {
                localVarQueryParameter['includeDeactivated'] = includeDeactivated;
            }

            if (personTypes !== undefined) {
                localVarQueryParameter['personTypes'] = personTypes;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get person
         * @param {string} id The id of the person to find. Duplicated here as we accept a plain string (not only a uuid)
         * @param {boolean} [includeGroups] Include groups in result
         * @param {boolean} [includeAcls] include acls for each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson: async (id: string, includeGroups?: boolean, includeAcls?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getPerson.');
            }
            const localVarPath = `/mr-api/person/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeGroups !== undefined) {
                localVarQueryParameter['includeGroups'] = includeGroups;
            }

            if (includeAcls !== undefined) {
                localVarQueryParameter['includeAcls'] = includeAcls;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset security token of supported person type (usually service accounts only)
         * @param {string} id The id of the person to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetSecurityToken: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling resetSecurityToken.');
            }
            const localVarPath = `/mr-api/person/{id}/token-reset`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a person
         * @param {string} id The id of the person to find
         * @param {Person} person 
         * @param {boolean} [includeGroups] Include groups in result
         * @param {boolean} [includeAcls] include acls for each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePerson: async (id: string, person: Person, includeGroups?: boolean, includeAcls?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePerson.');
            }
            // verify required parameter 'person' is not null or undefined
            if (person === null || person === undefined) {
                throw new RequiredError('person','Required parameter person was null or undefined when calling updatePerson.');
            }
            const localVarPath = `/mr-api/person/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeGroups !== undefined) {
                localVarQueryParameter['includeGroups'] = includeGroups;
            }

            if (includeAcls !== undefined) {
                localVarQueryParameter['includeAcls'] = includeAcls;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof person !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(person !== undefined ? ObjectSerializer.serialize(person, 'Person') : {}) : (person || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a person
         * @param {string} id The id of the person to find
         * @param {UpdatePerson} updatePerson 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonV2: async (id: string, updatePerson: UpdatePerson, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updatePersonV2.');
            }
            // verify required parameter 'updatePerson' is not null or undefined
            if (updatePerson === null || updatePerson === undefined) {
                throw new RequiredError('updatePerson','Required parameter updatePerson was null or undefined when calling updatePersonV2.');
            }
            const localVarPath = `/mr-api/person/{id}/v2`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updatePerson !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updatePerson !== undefined ? ObjectSerializer.serialize(updatePerson, 'UpdatePerson') : {}) : (updatePerson || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PersonServiceApi - functional programming interface
 * @export
 */
export const PersonServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Create a new person
         * @param {CreatePersonDetails} createPersonDetails 
         * @param {boolean} [includeGroups] Include groups in result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPerson(createPersonDetails: CreatePersonDetails, includeGroups?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationUrl>> {
            const localVarAxiosArgs = await PersonServiceApiAxiosParamCreator(configuration).createPerson(createPersonDetails, includeGroups, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a person
         * @param {string} id The id of the person to find
         * @param {boolean} [includeGroups] Include groups in result
         * @param {boolean} [includeAcls] include acls for each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePerson(id: string, includeGroups?: boolean, includeAcls?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await PersonServiceApiAxiosParamCreator(configuration).deletePerson(id, includeGroups, includeAcls, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a list of matching people.
         * @param {boolean} [includeGroups] Include groups in result
         * @param {boolean} [countGroups] Return the number of groups
         * @param {SortOrder} [order] how to order the results
         * @param {string} [filter] What to filter the results by
         * @param {number} [startAt] Where in the results to start
         * @param {number} [pageSize] How many results to return
         * @param {boolean} [includeLastLoggedIn] Include last logged in timestamp
         * @param {boolean} [includeDeactivated] Include people who are no longer active
         * @param {Array<PersonType>} [personTypes] Filter by person types
         * @param {SearchPersonSortBy} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findPeople(includeGroups?: boolean, countGroups?: boolean, order?: SortOrder, filter?: string, startAt?: number, pageSize?: number, includeLastLoggedIn?: boolean, includeDeactivated?: boolean, personTypes?: Array<PersonType>, sortBy?: SearchPersonSortBy, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchPersonResult>> {
            const localVarAxiosArgs = await PersonServiceApiAxiosParamCreator(configuration).findPeople(includeGroups, countGroups, order, filter, startAt, pageSize, includeLastLoggedIn, includeDeactivated, personTypes, sortBy, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get person
         * @param {string} id The id of the person to find. Duplicated here as we accept a plain string (not only a uuid)
         * @param {boolean} [includeGroups] Include groups in result
         * @param {boolean} [includeAcls] include acls for each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPerson(id: string, includeGroups?: boolean, includeAcls?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await PersonServiceApiAxiosParamCreator(configuration).getPerson(id, includeGroups, includeAcls, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Reset security token of supported person type (usually service accounts only)
         * @param {string} id The id of the person to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetSecurityToken(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdminServiceResetTokenResponse>> {
            const localVarAxiosArgs = await PersonServiceApiAxiosParamCreator(configuration).resetSecurityToken(id, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a person
         * @param {string} id The id of the person to find
         * @param {Person} person 
         * @param {boolean} [includeGroups] Include groups in result
         * @param {boolean} [includeAcls] include acls for each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePerson(id: string, person: Person, includeGroups?: boolean, includeAcls?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await PersonServiceApiAxiosParamCreator(configuration).updatePerson(id, person, includeGroups, includeAcls, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a person
         * @param {string} id The id of the person to find
         * @param {UpdatePerson} updatePerson 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePersonV2(id: string, updatePerson: UpdatePerson, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await PersonServiceApiAxiosParamCreator(configuration).updatePersonV2(id, updatePerson, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PersonServiceApi - factory interface
 * @export
 */
export const PersonServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Create a new person
         * @param {CreatePersonDetails} createPersonDetails 
         * @param {boolean} [includeGroups] Include groups in result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPerson(createPersonDetails: CreatePersonDetails, includeGroups?: boolean, options?: any): AxiosPromise<RegistrationUrl> {
            return PersonServiceApiFp(configuration).createPerson(createPersonDetails, includeGroups, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a person
         * @param {string} id The id of the person to find
         * @param {boolean} [includeGroups] Include groups in result
         * @param {boolean} [includeAcls] include acls for each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePerson(id: string, includeGroups?: boolean, includeAcls?: boolean, options?: any): AxiosPromise<boolean> {
            return PersonServiceApiFp(configuration).deletePerson(id, includeGroups, includeAcls, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of matching people.
         * @param {boolean} [includeGroups] Include groups in result
         * @param {boolean} [countGroups] Return the number of groups
         * @param {SortOrder} [order] how to order the results
         * @param {string} [filter] What to filter the results by
         * @param {number} [startAt] Where in the results to start
         * @param {number} [pageSize] How many results to return
         * @param {boolean} [includeLastLoggedIn] Include last logged in timestamp
         * @param {boolean} [includeDeactivated] Include people who are no longer active
         * @param {Array<PersonType>} [personTypes] Filter by person types
         * @param {SearchPersonSortBy} [sortBy] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findPeople(includeGroups?: boolean, countGroups?: boolean, order?: SortOrder, filter?: string, startAt?: number, pageSize?: number, includeLastLoggedIn?: boolean, includeDeactivated?: boolean, personTypes?: Array<PersonType>, sortBy?: SearchPersonSortBy, options?: any): AxiosPromise<SearchPersonResult> {
            return PersonServiceApiFp(configuration).findPeople(includeGroups, countGroups, order, filter, startAt, pageSize, includeLastLoggedIn, includeDeactivated, personTypes, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get person
         * @param {string} id The id of the person to find. Duplicated here as we accept a plain string (not only a uuid)
         * @param {boolean} [includeGroups] Include groups in result
         * @param {boolean} [includeAcls] include acls for each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPerson(id: string, includeGroups?: boolean, includeAcls?: boolean, options?: any): AxiosPromise<Person> {
            return PersonServiceApiFp(configuration).getPerson(id, includeGroups, includeAcls, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset security token of supported person type (usually service accounts only)
         * @param {string} id The id of the person to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetSecurityToken(id: string, options?: any): AxiosPromise<AdminServiceResetTokenResponse> {
            return PersonServiceApiFp(configuration).resetSecurityToken(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a person
         * @param {string} id The id of the person to find
         * @param {Person} person 
         * @param {boolean} [includeGroups] Include groups in result
         * @param {boolean} [includeAcls] include acls for each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePerson(id: string, person: Person, includeGroups?: boolean, includeAcls?: boolean, options?: any): AxiosPromise<Person> {
            return PersonServiceApiFp(configuration).updatePerson(id, person, includeGroups, includeAcls, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a person
         * @param {string} id The id of the person to find
         * @param {UpdatePerson} updatePerson 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePersonV2(id: string, updatePerson: UpdatePerson, options?: any): AxiosPromise<void> {
            return PersonServiceApiFp(configuration).updatePersonV2(id, updatePerson, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PersonServiceApi - object-oriented interface
 * @export
 * @class PersonServiceApi
 * @extends {BaseAPI}
 */
export class PersonServiceApi extends BaseAPI {
    /**
     * Create a new person
     * @param {CreatePersonDetails} createPersonDetails 
     * @param {boolean} [includeGroups] Include groups in result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonServiceApi
     */
    public createPerson(createPersonDetails: CreatePersonDetails, includeGroups?: boolean, options?: any): AxiosPromise<RegistrationUrl> {
        return PersonServiceApiFp(this.configuration).createPerson(createPersonDetails, includeGroups, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a person
     * @param {string} id The id of the person to find
     * @param {boolean} [includeGroups] Include groups in result
     * @param {boolean} [includeAcls] include acls for each group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonServiceApi
     */
    public deletePerson(id: string, includeGroups?: boolean, includeAcls?: boolean, options?: any): AxiosPromise<boolean> {
        return PersonServiceApiFp(this.configuration).deletePerson(id, includeGroups, includeAcls, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of matching people.
     * @param {boolean} [includeGroups] Include groups in result
     * @param {boolean} [countGroups] Return the number of groups
     * @param {SortOrder} [order] how to order the results
     * @param {string} [filter] What to filter the results by
     * @param {number} [startAt] Where in the results to start
     * @param {number} [pageSize] How many results to return
     * @param {boolean} [includeLastLoggedIn] Include last logged in timestamp
     * @param {boolean} [includeDeactivated] Include people who are no longer active
     * @param {Array<PersonType>} [personTypes] Filter by person types
     * @param {SearchPersonSortBy} [sortBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonServiceApi
     */
    public findPeople(includeGroups?: boolean, countGroups?: boolean, order?: SortOrder, filter?: string, startAt?: number, pageSize?: number, includeLastLoggedIn?: boolean, includeDeactivated?: boolean, personTypes?: Array<PersonType>, sortBy?: SearchPersonSortBy, options?: any): AxiosPromise<SearchPersonResult> {
        return PersonServiceApiFp(this.configuration).findPeople(includeGroups, countGroups, order, filter, startAt, pageSize, includeLastLoggedIn, includeDeactivated, personTypes, sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get person
     * @param {string} id The id of the person to find. Duplicated here as we accept a plain string (not only a uuid)
     * @param {boolean} [includeGroups] Include groups in result
     * @param {boolean} [includeAcls] include acls for each group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonServiceApi
     */
    public getPerson(id: string, includeGroups?: boolean, includeAcls?: boolean, options?: any): AxiosPromise<Person> {
        return PersonServiceApiFp(this.configuration).getPerson(id, includeGroups, includeAcls, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reset security token of supported person type (usually service accounts only)
     * @param {string} id The id of the person to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonServiceApi
     */
    public resetSecurityToken(id: string, options?: any): AxiosPromise<AdminServiceResetTokenResponse> {
        return PersonServiceApiFp(this.configuration).resetSecurityToken(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a person
     * @param {string} id The id of the person to find
     * @param {Person} person 
     * @param {boolean} [includeGroups] Include groups in result
     * @param {boolean} [includeAcls] include acls for each group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonServiceApi
     */
    public updatePerson(id: string, person: Person, includeGroups?: boolean, includeAcls?: boolean, options?: any): AxiosPromise<Person> {
        return PersonServiceApiFp(this.configuration).updatePerson(id, person, includeGroups, includeAcls, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a person
     * @param {string} id The id of the person to find
     * @param {UpdatePerson} updatePerson 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PersonServiceApi
     */
    public updatePersonV2(id: string, updatePerson: UpdatePerson, options?: any): AxiosPromise<void> {
        return PersonServiceApiFp(this.configuration).updatePersonV2(id, updatePerson, options).then((request) => request(this.axios, this.basePath));
    }
}
