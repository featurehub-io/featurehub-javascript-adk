/* tslint:disable */
/* eslint-disable */
/**
 * ManagementResourceApi
 * This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.
 *
 * The version of the OpenAPI document: 1.1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Group } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
// @ts-ignore
import { ObjectSerializer } from '../models';
/**
 * GroupServiceApi - axios parameter creator
 * @export
 */
export const GroupServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a person to a group
         * @param {string} gid The id of the group to find
         * @param {string} pId The id of the person to add/delete
         * @param {boolean} [includeMembers] include people in each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPersonToGroup: async (gid: string, pId: string, includeMembers?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gid' is not null or undefined
            if (gid === null || gid === undefined) {
                throw new RequiredError('gid','Required parameter gid was null or undefined when calling addPersonToGroup.');
            }
            // verify required parameter 'pId' is not null or undefined
            if (pId === null || pId === undefined) {
                throw new RequiredError('pId','Required parameter pId was null or undefined when calling addPersonToGroup.');
            }
            const localVarPath = `/mr-api/group/{gid}/person/{pId}`
                .replace(`{${"gid"}}`, encodeURIComponent(String(gid)))
                .replace(`{${"pId"}}`, encodeURIComponent(String(pId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeMembers !== undefined) {
                localVarQueryParameter['includeMembers'] = includeMembers;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new group
         * @param {string} id The id of the portfolio to find
         * @param {Group} group 
         * @param {boolean} [includePeople] include people in each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup: async (id: string, group: Group, includePeople?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createGroup.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling createGroup.');
            }
            const localVarPath = `/mr-api/portfolio/{id}/group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includePeople !== undefined) {
                localVarQueryParameter['includePeople'] = includePeople;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof group !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(group !== undefined ? ObjectSerializer.serialize(group, 'Group') : {}) : (group || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a group
         * @param {string} gid The id of the group to find
         * @param {boolean} [includeMembers] include people in each group
         * @param {boolean} [includeGroupRoles] include environment and application roles in each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup: async (gid: string, includeMembers?: boolean, includeGroupRoles?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gid' is not null or undefined
            if (gid === null || gid === undefined) {
                throw new RequiredError('gid','Required parameter gid was null or undefined when calling deleteGroup.');
            }
            const localVarPath = `/mr-api/group/{gid}`
                .replace(`{${"gid"}}`, encodeURIComponent(String(gid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeMembers !== undefined) {
                localVarQueryParameter['includeMembers'] = includeMembers;
            }

            if (includeGroupRoles !== undefined) {
                localVarQueryParameter['includeGroupRoles'] = includeGroupRoles;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove a person from a group
         * @param {string} gid The id of the group to find
         * @param {string} pId The id of the person to add/delete
         * @param {boolean} [includeMembers] include people in each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePersonFromGroup: async (gid: string, pId: string, includeMembers?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gid' is not null or undefined
            if (gid === null || gid === undefined) {
                throw new RequiredError('gid','Required parameter gid was null or undefined when calling deletePersonFromGroup.');
            }
            // verify required parameter 'pId' is not null or undefined
            if (pId === null || pId === undefined) {
                throw new RequiredError('pId','Required parameter pId was null or undefined when calling deletePersonFromGroup.');
            }
            const localVarPath = `/mr-api/group/{gid}/person/{pId}`
                .replace(`{${"gid"}}`, encodeURIComponent(String(gid)))
                .replace(`{${"pId"}}`, encodeURIComponent(String(pId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeMembers !== undefined) {
                localVarQueryParameter['includeMembers'] = includeMembers;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of groups.
         * @param {string} id The id of the portfolio to find
         * @param {boolean} [includePeople] include people in each group
         * @param {SortOrder} [order] how to order the results
         * @param {string} [filter] What to filter the results by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findGroups: async (id: string, includePeople?: boolean, order?: SortOrder, filter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling findGroups.');
            }
            const localVarPath = `/mr-api/portfolio/{id}/group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includePeople !== undefined) {
                localVarQueryParameter['includePeople'] = includePeople;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get group
         * @param {string} gid The id of the group to find
         * @param {boolean} [includeMembers] include people in each group
         * @param {boolean} [includeGroupRoles] include environment and application roles in each group
         * @param {string} [byApplicationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup: async (gid: string, includeMembers?: boolean, includeGroupRoles?: boolean, byApplicationId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gid' is not null or undefined
            if (gid === null || gid === undefined) {
                throw new RequiredError('gid','Required parameter gid was null or undefined when calling getGroup.');
            }
            const localVarPath = `/mr-api/group/{gid}`
                .replace(`{${"gid"}}`, encodeURIComponent(String(gid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeMembers !== undefined) {
                localVarQueryParameter['includeMembers'] = includeMembers;
            }

            if (includeGroupRoles !== undefined) {
                localVarQueryParameter['includeGroupRoles'] = includeGroupRoles;
            }

            if (byApplicationId !== undefined) {
                localVarQueryParameter['byApplicationId'] = byApplicationId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the superuser group for this organisation. There is no other way to ascertain which org you are dealing with
         * @param {string} id the id of the organisation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuperuserGroup: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getSuperuserGroup.');
            }
            const localVarPath = `/mr-api/organization/{id}/group`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a group
         * @param {string} gid The id of the group to find
         * @param {Group} group 
         * @param {boolean} [includeMembers] include people in each group
         * @param {boolean} [includeGroupRoles] include environment and application roles in each group
         * @param {boolean} [updateMembers] update members, deleting those that are not passed
         * @param {boolean} [updateEnvironmentGroupRoles] update environment group roles, deleting any not passed
         * @param {boolean} [updateApplicationGroupRoles] update application group roles, deleting any not passed
         * @param {string} [applicationId] if updating the application group roles, and the application id is passed, then the changes are limited to that application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup: async (gid: string, group: Group, includeMembers?: boolean, includeGroupRoles?: boolean, updateMembers?: boolean, updateEnvironmentGroupRoles?: boolean, updateApplicationGroupRoles?: boolean, applicationId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gid' is not null or undefined
            if (gid === null || gid === undefined) {
                throw new RequiredError('gid','Required parameter gid was null or undefined when calling updateGroup.');
            }
            // verify required parameter 'group' is not null or undefined
            if (group === null || group === undefined) {
                throw new RequiredError('group','Required parameter group was null or undefined when calling updateGroup.');
            }
            const localVarPath = `/mr-api/group/{gid}`
                .replace(`{${"gid"}}`, encodeURIComponent(String(gid)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeMembers !== undefined) {
                localVarQueryParameter['includeMembers'] = includeMembers;
            }

            if (includeGroupRoles !== undefined) {
                localVarQueryParameter['includeGroupRoles'] = includeGroupRoles;
            }

            if (updateMembers !== undefined) {
                localVarQueryParameter['updateMembers'] = updateMembers;
            }

            if (updateEnvironmentGroupRoles !== undefined) {
                localVarQueryParameter['updateEnvironmentGroupRoles'] = updateEnvironmentGroupRoles;
            }

            if (updateApplicationGroupRoles !== undefined) {
                localVarQueryParameter['updateApplicationGroupRoles'] = updateApplicationGroupRoles;
            }

            if (applicationId !== undefined) {
                localVarQueryParameter['applicationId'] = applicationId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof group !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(group !== undefined ? ObjectSerializer.serialize(group, 'Group') : {}) : (group || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupServiceApi - functional programming interface
 * @export
 */
export const GroupServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add a person to a group
         * @param {string} gid The id of the group to find
         * @param {string} pId The id of the person to add/delete
         * @param {boolean} [includeMembers] include people in each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPersonToGroup(gid: string, pId: string, includeMembers?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).addPersonToGroup(gid, pId, includeMembers, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new group
         * @param {string} id The id of the portfolio to find
         * @param {Group} group 
         * @param {boolean} [includePeople] include people in each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createGroup(id: string, group: Group, includePeople?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).createGroup(id, group, includePeople, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete a group
         * @param {string} gid The id of the group to find
         * @param {boolean} [includeMembers] include people in each group
         * @param {boolean} [includeGroupRoles] include environment and application roles in each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGroup(gid: string, includeMembers?: boolean, includeGroupRoles?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).deleteGroup(gid, includeMembers, includeGroupRoles, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Remove a person from a group
         * @param {string} gid The id of the group to find
         * @param {string} pId The id of the person to add/delete
         * @param {boolean} [includeMembers] include people in each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePersonFromGroup(gid: string, pId: string, includeMembers?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).deletePersonFromGroup(gid, pId, includeMembers, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a list of groups.
         * @param {string} id The id of the portfolio to find
         * @param {boolean} [includePeople] include people in each group
         * @param {SortOrder} [order] how to order the results
         * @param {string} [filter] What to filter the results by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findGroups(id: string, includePeople?: boolean, order?: SortOrder, filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Group>>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).findGroups(id, includePeople, order, filter, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get group
         * @param {string} gid The id of the group to find
         * @param {boolean} [includeMembers] include people in each group
         * @param {boolean} [includeGroupRoles] include environment and application roles in each group
         * @param {string} [byApplicationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGroup(gid: string, includeMembers?: boolean, includeGroupRoles?: boolean, byApplicationId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).getGroup(gid, includeMembers, includeGroupRoles, byApplicationId, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets the superuser group for this organisation. There is no other way to ascertain which org you are dealing with
         * @param {string} id the id of the organisation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSuperuserGroup(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).getSuperuserGroup(id, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a group
         * @param {string} gid The id of the group to find
         * @param {Group} group 
         * @param {boolean} [includeMembers] include people in each group
         * @param {boolean} [includeGroupRoles] include environment and application roles in each group
         * @param {boolean} [updateMembers] update members, deleting those that are not passed
         * @param {boolean} [updateEnvironmentGroupRoles] update environment group roles, deleting any not passed
         * @param {boolean} [updateApplicationGroupRoles] update application group roles, deleting any not passed
         * @param {string} [applicationId] if updating the application group roles, and the application id is passed, then the changes are limited to that application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateGroup(gid: string, group: Group, includeMembers?: boolean, includeGroupRoles?: boolean, updateMembers?: boolean, updateEnvironmentGroupRoles?: boolean, updateApplicationGroupRoles?: boolean, applicationId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Group>> {
            const localVarAxiosArgs = await GroupServiceApiAxiosParamCreator(configuration).updateGroup(gid, group, includeMembers, includeGroupRoles, updateMembers, updateEnvironmentGroupRoles, updateApplicationGroupRoles, applicationId, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GroupServiceApi - factory interface
 * @export
 */
export const GroupServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add a person to a group
         * @param {string} gid The id of the group to find
         * @param {string} pId The id of the person to add/delete
         * @param {boolean} [includeMembers] include people in each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPersonToGroup(gid: string, pId: string, includeMembers?: boolean, options?: any): AxiosPromise<Group> {
            return GroupServiceApiFp(configuration).addPersonToGroup(gid, pId, includeMembers, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new group
         * @param {string} id The id of the portfolio to find
         * @param {Group} group 
         * @param {boolean} [includePeople] include people in each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createGroup(id: string, group: Group, includePeople?: boolean, options?: any): AxiosPromise<Group> {
            return GroupServiceApiFp(configuration).createGroup(id, group, includePeople, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a group
         * @param {string} gid The id of the group to find
         * @param {boolean} [includeMembers] include people in each group
         * @param {boolean} [includeGroupRoles] include environment and application roles in each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGroup(gid: string, includeMembers?: boolean, includeGroupRoles?: boolean, options?: any): AxiosPromise<boolean> {
            return GroupServiceApiFp(configuration).deleteGroup(gid, includeMembers, includeGroupRoles, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove a person from a group
         * @param {string} gid The id of the group to find
         * @param {string} pId The id of the person to add/delete
         * @param {boolean} [includeMembers] include people in each group
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePersonFromGroup(gid: string, pId: string, includeMembers?: boolean, options?: any): AxiosPromise<Group> {
            return GroupServiceApiFp(configuration).deletePersonFromGroup(gid, pId, includeMembers, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of groups.
         * @param {string} id The id of the portfolio to find
         * @param {boolean} [includePeople] include people in each group
         * @param {SortOrder} [order] how to order the results
         * @param {string} [filter] What to filter the results by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findGroups(id: string, includePeople?: boolean, order?: SortOrder, filter?: string, options?: any): AxiosPromise<Array<Group>> {
            return GroupServiceApiFp(configuration).findGroups(id, includePeople, order, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Get group
         * @param {string} gid The id of the group to find
         * @param {boolean} [includeMembers] include people in each group
         * @param {boolean} [includeGroupRoles] include environment and application roles in each group
         * @param {string} [byApplicationId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGroup(gid: string, includeMembers?: boolean, includeGroupRoles?: boolean, byApplicationId?: string, options?: any): AxiosPromise<Group> {
            return GroupServiceApiFp(configuration).getGroup(gid, includeMembers, includeGroupRoles, byApplicationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the superuser group for this organisation. There is no other way to ascertain which org you are dealing with
         * @param {string} id the id of the organisation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSuperuserGroup(id: string, options?: any): AxiosPromise<Group> {
            return GroupServiceApiFp(configuration).getSuperuserGroup(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a group
         * @param {string} gid The id of the group to find
         * @param {Group} group 
         * @param {boolean} [includeMembers] include people in each group
         * @param {boolean} [includeGroupRoles] include environment and application roles in each group
         * @param {boolean} [updateMembers] update members, deleting those that are not passed
         * @param {boolean} [updateEnvironmentGroupRoles] update environment group roles, deleting any not passed
         * @param {boolean} [updateApplicationGroupRoles] update application group roles, deleting any not passed
         * @param {string} [applicationId] if updating the application group roles, and the application id is passed, then the changes are limited to that application
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateGroup(gid: string, group: Group, includeMembers?: boolean, includeGroupRoles?: boolean, updateMembers?: boolean, updateEnvironmentGroupRoles?: boolean, updateApplicationGroupRoles?: boolean, applicationId?: string, options?: any): AxiosPromise<Group> {
            return GroupServiceApiFp(configuration).updateGroup(gid, group, includeMembers, includeGroupRoles, updateMembers, updateEnvironmentGroupRoles, updateApplicationGroupRoles, applicationId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupServiceApi - object-oriented interface
 * @export
 * @class GroupServiceApi
 * @extends {BaseAPI}
 */
export class GroupServiceApi extends BaseAPI {
    /**
     * Add a person to a group
     * @param {string} gid The id of the group to find
     * @param {string} pId The id of the person to add/delete
     * @param {boolean} [includeMembers] include people in each group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public addPersonToGroup(gid: string, pId: string, includeMembers?: boolean, options?: any): AxiosPromise<Group> {
        return GroupServiceApiFp(this.configuration).addPersonToGroup(gid, pId, includeMembers, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new group
     * @param {string} id The id of the portfolio to find
     * @param {Group} group 
     * @param {boolean} [includePeople] include people in each group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public createGroup(id: string, group: Group, includePeople?: boolean, options?: any): AxiosPromise<Group> {
        return GroupServiceApiFp(this.configuration).createGroup(id, group, includePeople, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a group
     * @param {string} gid The id of the group to find
     * @param {boolean} [includeMembers] include people in each group
     * @param {boolean} [includeGroupRoles] include environment and application roles in each group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public deleteGroup(gid: string, includeMembers?: boolean, includeGroupRoles?: boolean, options?: any): AxiosPromise<boolean> {
        return GroupServiceApiFp(this.configuration).deleteGroup(gid, includeMembers, includeGroupRoles, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove a person from a group
     * @param {string} gid The id of the group to find
     * @param {string} pId The id of the person to add/delete
     * @param {boolean} [includeMembers] include people in each group
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public deletePersonFromGroup(gid: string, pId: string, includeMembers?: boolean, options?: any): AxiosPromise<Group> {
        return GroupServiceApiFp(this.configuration).deletePersonFromGroup(gid, pId, includeMembers, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of groups.
     * @param {string} id The id of the portfolio to find
     * @param {boolean} [includePeople] include people in each group
     * @param {SortOrder} [order] how to order the results
     * @param {string} [filter] What to filter the results by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public findGroups(id: string, includePeople?: boolean, order?: SortOrder, filter?: string, options?: any): AxiosPromise<Array<Group>> {
        return GroupServiceApiFp(this.configuration).findGroups(id, includePeople, order, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get group
     * @param {string} gid The id of the group to find
     * @param {boolean} [includeMembers] include people in each group
     * @param {boolean} [includeGroupRoles] include environment and application roles in each group
     * @param {string} [byApplicationId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public getGroup(gid: string, includeMembers?: boolean, includeGroupRoles?: boolean, byApplicationId?: string, options?: any): AxiosPromise<Group> {
        return GroupServiceApiFp(this.configuration).getGroup(gid, includeMembers, includeGroupRoles, byApplicationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the superuser group for this organisation. There is no other way to ascertain which org you are dealing with
     * @param {string} id the id of the organisation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public getSuperuserGroup(id: string, options?: any): AxiosPromise<Group> {
        return GroupServiceApiFp(this.configuration).getSuperuserGroup(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a group
     * @param {string} gid The id of the group to find
     * @param {Group} group 
     * @param {boolean} [includeMembers] include people in each group
     * @param {boolean} [includeGroupRoles] include environment and application roles in each group
     * @param {boolean} [updateMembers] update members, deleting those that are not passed
     * @param {boolean} [updateEnvironmentGroupRoles] update environment group roles, deleting any not passed
     * @param {boolean} [updateApplicationGroupRoles] update application group roles, deleting any not passed
     * @param {string} [applicationId] if updating the application group roles, and the application id is passed, then the changes are limited to that application
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupServiceApi
     */
    public updateGroup(gid: string, group: Group, includeMembers?: boolean, includeGroupRoles?: boolean, updateMembers?: boolean, updateEnvironmentGroupRoles?: boolean, updateApplicationGroupRoles?: boolean, applicationId?: string, options?: any): AxiosPromise<Group> {
        return GroupServiceApiFp(this.configuration).updateGroup(gid, group, includeMembers, includeGroupRoles, updateMembers, updateEnvironmentGroupRoles, updateApplicationGroupRoles, applicationId, options).then((request) => request(this.axios, this.basePath));
    }
}
