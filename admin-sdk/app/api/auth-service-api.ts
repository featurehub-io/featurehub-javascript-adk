/* tslint:disable */
/* eslint-disable */
/**
 * ManagementResourceApi
 * This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.
 *
 * The version of the OpenAPI document: 1.1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { PasswordReset } from '../models';
// @ts-ignore
import { PasswordUpdate } from '../models';
// @ts-ignore
import { Person } from '../models';
// @ts-ignore
import { PersonRegistrationDetails } from '../models';
// @ts-ignore
import { ProviderRedirect } from '../models';
// @ts-ignore
import { RegistrationUrl } from '../models';
// @ts-ignore
import { TokenizedPerson } from '../models';
// @ts-ignore
import { UserCredentials } from '../models';
// @ts-ignore
import { ObjectSerializer } from '../models';
/**
 * AuthServiceApi - axios parameter creator
 * @export
 */
export const AuthServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Change password
         * @param {string} id The id of the person to change password for
         * @param {PasswordUpdate} passwordUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword: async (id: string, passwordUpdate: PasswordUpdate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling changePassword.');
            }
            // verify required parameter 'passwordUpdate' is not null or undefined
            if (passwordUpdate === null || passwordUpdate === undefined) {
                throw new RequiredError('passwordUpdate','Required parameter passwordUpdate was null or undefined when calling changePassword.');
            }
            const localVarPath = `/mr-api/authentication/{id}/changePassword`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof passwordUpdate !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(passwordUpdate !== undefined ? ObjectSerializer.serialize(passwordUpdate, 'PasswordUpdate') : {}) : (passwordUpdate || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a login URL for this specified provider if it is supported by the server
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginUrlForProvider: async (provider: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'provider' is not null or undefined
            if (provider === null || provider === undefined) {
                throw new RequiredError('provider','Required parameter provider was null or undefined when calling getLoginUrlForProvider.');
            }
            const localVarPath = `/mr-api/external-provider/{provider}`
                .replace(`{${"provider"}}`, encodeURIComponent(String(provider)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Login to Feature Hub
         * @param {UserCredentials} userCredentials 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (userCredentials: UserCredentials, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCredentials' is not null or undefined
            if (userCredentials === null || userCredentials === undefined) {
                throw new RequiredError('userCredentials','Required parameter userCredentials was null or undefined when calling login.');
            }
            const localVarPath = `/mr-api/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userCredentials !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userCredentials !== undefined ? ObjectSerializer.serialize(userCredentials, 'UserCredentials') : {}) : (userCredentials || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get person by token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mr-api/logout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get person by token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personByToken: async (token: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling personByToken.');
            }
            const localVarPath = `/mr-api/authentication/{token}`
                .replace(`{${"token"}}`, encodeURIComponent(String(token)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new user
         * @param {PersonRegistrationDetails} personRegistrationDetails 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPerson: async (personRegistrationDetails: PersonRegistrationDetails, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'personRegistrationDetails' is not null or undefined
            if (personRegistrationDetails === null || personRegistrationDetails === undefined) {
                throw new RequiredError('personRegistrationDetails','Required parameter personRegistrationDetails was null or undefined when calling registerPerson.');
            }
            const localVarPath = `/mr-api/authentication`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof personRegistrationDetails !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(personRegistrationDetails !== undefined ? ObjectSerializer.serialize(personRegistrationDetails, 'PersonRegistrationDetails') : {}) : (personRegistrationDetails || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replace temporary password
         * @param {string} id The id of the person to replace temporary password for
         * @param {PasswordReset} passwordReset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceTempPassword: async (id: string, passwordReset: PasswordReset, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling replaceTempPassword.');
            }
            // verify required parameter 'passwordReset' is not null or undefined
            if (passwordReset === null || passwordReset === undefined) {
                throw new RequiredError('passwordReset','Required parameter passwordReset was null or undefined when calling replaceTempPassword.');
            }
            const localVarPath = `/mr-api/authentication/{id}/replaceTempPassword`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof passwordReset !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(passwordReset !== undefined ? ObjectSerializer.serialize(passwordReset, 'PasswordReset') : {}) : (passwordReset || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Allows an administrator to reset a user\'s expired token so they can login
         * @param {string} email The email address of the person whose expired token to reset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetExpiredToken: async (email: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling resetExpiredToken.');
            }
            const localVarPath = `/mr-api/authentication/{email}/expiredTokenReset`
                .replace(`{${"email"}}`, encodeURIComponent(String(email)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reset password
         * @param {string} id The id of the person to reset password for
         * @param {PasswordReset} passwordReset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword: async (id: string, passwordReset: PasswordReset, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling resetPassword.');
            }
            // verify required parameter 'passwordReset' is not null or undefined
            if (passwordReset === null || passwordReset === undefined) {
                throw new RequiredError('passwordReset','Required parameter passwordReset was null or undefined when calling resetPassword.');
            }
            const localVarPath = `/mr-api/authentication/{id}/resetPassword`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof passwordReset !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(passwordReset !== undefined ? ObjectSerializer.serialize(passwordReset, 'PasswordReset') : {}) : (passwordReset || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthServiceApi - functional programming interface
 * @export
 */
export const AuthServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Change password
         * @param {string} id The id of the person to change password for
         * @param {PasswordUpdate} passwordUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePassword(id: string, passwordUpdate: PasswordUpdate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await AuthServiceApiAxiosParamCreator(configuration).changePassword(id, passwordUpdate, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a login URL for this specified provider if it is supported by the server
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getLoginUrlForProvider(provider: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProviderRedirect>> {
            const localVarAxiosArgs = await AuthServiceApiAxiosParamCreator(configuration).getLoginUrlForProvider(provider, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Login to Feature Hub
         * @param {UserCredentials} userCredentials 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(userCredentials: UserCredentials, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenizedPerson>> {
            const localVarAxiosArgs = await AuthServiceApiAxiosParamCreator(configuration).login(userCredentials, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get person by token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await AuthServiceApiAxiosParamCreator(configuration).logout(options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get person by token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async personByToken(token: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await AuthServiceApiAxiosParamCreator(configuration).personByToken(token, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new user
         * @param {PersonRegistrationDetails} personRegistrationDetails 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerPerson(personRegistrationDetails: PersonRegistrationDetails, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenizedPerson>> {
            const localVarAxiosArgs = await AuthServiceApiAxiosParamCreator(configuration).registerPerson(personRegistrationDetails, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Replace temporary password
         * @param {string} id The id of the person to replace temporary password for
         * @param {PasswordReset} passwordReset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceTempPassword(id: string, passwordReset: PasswordReset, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenizedPerson>> {
            const localVarAxiosArgs = await AuthServiceApiAxiosParamCreator(configuration).replaceTempPassword(id, passwordReset, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Allows an administrator to reset a user\'s expired token so they can login
         * @param {string} email The email address of the person whose expired token to reset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetExpiredToken(email: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistrationUrl>> {
            const localVarAxiosArgs = await AuthServiceApiAxiosParamCreator(configuration).resetExpiredToken(email, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Reset password
         * @param {string} id The id of the person to reset password for
         * @param {PasswordReset} passwordReset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async resetPassword(id: string, passwordReset: PasswordReset, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Person>> {
            const localVarAxiosArgs = await AuthServiceApiAxiosParamCreator(configuration).resetPassword(id, passwordReset, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AuthServiceApi - factory interface
 * @export
 */
export const AuthServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Change password
         * @param {string} id The id of the person to change password for
         * @param {PasswordUpdate} passwordUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePassword(id: string, passwordUpdate: PasswordUpdate, options?: any): AxiosPromise<Person> {
            return AuthServiceApiFp(configuration).changePassword(id, passwordUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a login URL for this specified provider if it is supported by the server
         * @param {string} provider 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getLoginUrlForProvider(provider: string, options?: any): AxiosPromise<ProviderRedirect> {
            return AuthServiceApiFp(configuration).getLoginUrlForProvider(provider, options).then((request) => request(axios, basePath));
        },
        /**
         * Login to Feature Hub
         * @param {UserCredentials} userCredentials 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(userCredentials: UserCredentials, options?: any): AxiosPromise<TokenizedPerson> {
            return AuthServiceApiFp(configuration).login(userCredentials, options).then((request) => request(axios, basePath));
        },
        /**
         * Get person by token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return AuthServiceApiFp(configuration).logout(options).then((request) => request(axios, basePath));
        },
        /**
         * Get person by token
         * @param {string} token 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        personByToken(token: string, options?: any): AxiosPromise<Person> {
            return AuthServiceApiFp(configuration).personByToken(token, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new user
         * @param {PersonRegistrationDetails} personRegistrationDetails 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerPerson(personRegistrationDetails: PersonRegistrationDetails, options?: any): AxiosPromise<TokenizedPerson> {
            return AuthServiceApiFp(configuration).registerPerson(personRegistrationDetails, options).then((request) => request(axios, basePath));
        },
        /**
         * Replace temporary password
         * @param {string} id The id of the person to replace temporary password for
         * @param {PasswordReset} passwordReset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceTempPassword(id: string, passwordReset: PasswordReset, options?: any): AxiosPromise<TokenizedPerson> {
            return AuthServiceApiFp(configuration).replaceTempPassword(id, passwordReset, options).then((request) => request(axios, basePath));
        },
        /**
         * Allows an administrator to reset a user\'s expired token so they can login
         * @param {string} email The email address of the person whose expired token to reset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetExpiredToken(email: string, options?: any): AxiosPromise<RegistrationUrl> {
            return AuthServiceApiFp(configuration).resetExpiredToken(email, options).then((request) => request(axios, basePath));
        },
        /**
         * Reset password
         * @param {string} id The id of the person to reset password for
         * @param {PasswordReset} passwordReset 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        resetPassword(id: string, passwordReset: PasswordReset, options?: any): AxiosPromise<Person> {
            return AuthServiceApiFp(configuration).resetPassword(id, passwordReset, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthServiceApi - object-oriented interface
 * @export
 * @class AuthServiceApi
 * @extends {BaseAPI}
 */
export class AuthServiceApi extends BaseAPI {
    /**
     * Change password
     * @param {string} id The id of the person to change password for
     * @param {PasswordUpdate} passwordUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public changePassword(id: string, passwordUpdate: PasswordUpdate, options?: any): AxiosPromise<Person> {
        return AuthServiceApiFp(this.configuration).changePassword(id, passwordUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a login URL for this specified provider if it is supported by the server
     * @param {string} provider 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public getLoginUrlForProvider(provider: string, options?: any): AxiosPromise<ProviderRedirect> {
        return AuthServiceApiFp(this.configuration).getLoginUrlForProvider(provider, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Login to Feature Hub
     * @param {UserCredentials} userCredentials 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public login(userCredentials: UserCredentials, options?: any): AxiosPromise<TokenizedPerson> {
        return AuthServiceApiFp(this.configuration).login(userCredentials, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get person by token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public logout(options?: any): AxiosPromise<void> {
        return AuthServiceApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get person by token
     * @param {string} token 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public personByToken(token: string, options?: any): AxiosPromise<Person> {
        return AuthServiceApiFp(this.configuration).personByToken(token, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new user
     * @param {PersonRegistrationDetails} personRegistrationDetails 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public registerPerson(personRegistrationDetails: PersonRegistrationDetails, options?: any): AxiosPromise<TokenizedPerson> {
        return AuthServiceApiFp(this.configuration).registerPerson(personRegistrationDetails, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replace temporary password
     * @param {string} id The id of the person to replace temporary password for
     * @param {PasswordReset} passwordReset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public replaceTempPassword(id: string, passwordReset: PasswordReset, options?: any): AxiosPromise<TokenizedPerson> {
        return AuthServiceApiFp(this.configuration).replaceTempPassword(id, passwordReset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Allows an administrator to reset a user\'s expired token so they can login
     * @param {string} email The email address of the person whose expired token to reset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public resetExpiredToken(email: string, options?: any): AxiosPromise<RegistrationUrl> {
        return AuthServiceApiFp(this.configuration).resetExpiredToken(email, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reset password
     * @param {string} id The id of the person to reset password for
     * @param {PasswordReset} passwordReset 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthServiceApi
     */
    public resetPassword(id: string, passwordReset: PasswordReset, options?: any): AxiosPromise<Person> {
        return AuthServiceApiFp(this.configuration).resetPassword(id, passwordReset, options).then((request) => request(this.axios, this.basePath));
    }
}
