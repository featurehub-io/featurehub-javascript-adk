/* tslint:disable */
/* eslint-disable */
/**
 * ManagementResourceApi
 * This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Application } from '../models';
// @ts-ignore
import { ApplicationPermissions } from '../models';
// @ts-ignore
import { ApplicationSummary } from '../models';
// @ts-ignore
import { CreateApplication } from '../models';
// @ts-ignore
import { SortOrder } from '../models';
// @ts-ignore
import { ObjectSerializer } from '../models';
/**
 * ApplicationServiceApi - axios parameter creator
 * @export
 */
export const ApplicationServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets the permissions of the current user for the specified application
         * @param {string} id The id of the application to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationPermissions: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling applicationPermissions.');
            }
            const localVarPath = `/mr-api/application/{id}/permissions`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new application
         * @param {string} id The id of the portfolio to find
         * @param {CreateApplication} createApplication 
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {boolean} [includeFeatures] Include the features in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication: async (id: string, createApplication: CreateApplication, includeEnvironments?: boolean, includeFeatures?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling createApplication.');
            }
            // verify required parameter 'createApplication' is not null or undefined
            if (createApplication === null || createApplication === undefined) {
                throw new RequiredError('createApplication','Required parameter createApplication was null or undefined when calling createApplication.');
            }
            const localVarPath = `/mr-api/portfolio/{id}/application`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeEnvironments !== undefined) {
                localVarQueryParameter['includeEnvironments'] = includeEnvironments;
            }

            if (includeFeatures !== undefined) {
                localVarQueryParameter['includeFeatures'] = includeFeatures;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createApplication !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createApplication !== undefined ? ObjectSerializer.serialize(createApplication, 'CreateApplication') : {}) : (createApplication || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an application
         * @param {string} appId The id of the application to find
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication: async (appId: string, includeEnvironments?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling deleteApplication.');
            }
            const localVarPath = `/mr-api/application/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeEnvironments !== undefined) {
                localVarQueryParameter['includeEnvironments'] = includeEnvironments;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of applications.
         * @param {string} id The id of the portfolio to find
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {boolean} [includeFeatures] Include the features in the result
         * @param {SortOrder} [order] how to order the results
         * @param {string} [filter] What to filter the results by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findApplications: async (id: string, includeEnvironments?: boolean, includeFeatures?: boolean, order?: SortOrder, filter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling findApplications.');
            }
            const localVarPath = `/mr-api/portfolio/{id}/application`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeEnvironments !== undefined) {
                localVarQueryParameter['includeEnvironments'] = includeEnvironments;
            }

            if (includeFeatures !== undefined) {
                localVarQueryParameter['includeFeatures'] = includeFeatures;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get application
         * @param {string} appId The id of the application to find
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplication: async (appId: string, includeEnvironments?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling getApplication.');
            }
            const localVarPath = `/mr-api/application/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeEnvironments !== undefined) {
                localVarQueryParameter['includeEnvironments'] = includeEnvironments;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Geta summary of the application status
         * @param {string} appId The id of the application to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summaryApplication: async (appId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling summaryApplication.');
            }
            const localVarPath = `/mr-api/application/{appId}/summary`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an application
         * @param {string} appId The id of the application to find
         * @param {Application} application 
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplication: async (appId: string, application: Application, includeEnvironments?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling updateApplication.');
            }
            // verify required parameter 'application' is not null or undefined
            if (application === null || application === undefined) {
                throw new RequiredError('application','Required parameter application was null or undefined when calling updateApplication.');
            }
            const localVarPath = `/mr-api/application/{appId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeEnvironments !== undefined) {
                localVarQueryParameter['includeEnvironments'] = includeEnvironments;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof application !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(application !== undefined ? ObjectSerializer.serialize(application, 'Application') : {}) : (application || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an application
         * @param {string} id The id of the portfolio to find
         * @param {Application} application 
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {boolean} [includeFeatures] Include the features in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplicationOnPortfolio: async (id: string, application: Application, includeEnvironments?: boolean, includeFeatures?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateApplicationOnPortfolio.');
            }
            // verify required parameter 'application' is not null or undefined
            if (application === null || application === undefined) {
                throw new RequiredError('application','Required parameter application was null or undefined when calling updateApplicationOnPortfolio.');
            }
            const localVarPath = `/mr-api/portfolio/{id}/application`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeEnvironments !== undefined) {
                localVarQueryParameter['includeEnvironments'] = includeEnvironments;
            }

            if (includeFeatures !== undefined) {
                localVarQueryParameter['includeFeatures'] = includeFeatures;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof application !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(application !== undefined ? ObjectSerializer.serialize(application, 'Application') : {}) : (application || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationServiceApi - functional programming interface
 * @export
 */
export const ApplicationServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Gets the permissions of the current user for the specified application
         * @param {string} id The id of the application to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async applicationPermissions(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationPermissions>> {
            const localVarAxiosArgs = await ApplicationServiceApiAxiosParamCreator(configuration).applicationPermissions(id, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a new application
         * @param {string} id The id of the portfolio to find
         * @param {CreateApplication} createApplication 
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {boolean} [includeFeatures] Include the features in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApplication(id: string, createApplication: CreateApplication, includeEnvironments?: boolean, includeFeatures?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await ApplicationServiceApiAxiosParamCreator(configuration).createApplication(id, createApplication, includeEnvironments, includeFeatures, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an application
         * @param {string} appId The id of the application to find
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApplication(appId: string, includeEnvironments?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await ApplicationServiceApiAxiosParamCreator(configuration).deleteApplication(appId, includeEnvironments, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Gets a list of applications.
         * @param {string} id The id of the portfolio to find
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {boolean} [includeFeatures] Include the features in the result
         * @param {SortOrder} [order] how to order the results
         * @param {string} [filter] What to filter the results by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findApplications(id: string, includeEnvironments?: boolean, includeFeatures?: boolean, order?: SortOrder, filter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Application>>> {
            const localVarAxiosArgs = await ApplicationServiceApiAxiosParamCreator(configuration).findApplications(id, includeEnvironments, includeFeatures, order, filter, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get application
         * @param {string} appId The id of the application to find
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplication(appId: string, includeEnvironments?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await ApplicationServiceApiAxiosParamCreator(configuration).getApplication(appId, includeEnvironments, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Geta summary of the application status
         * @param {string} appId The id of the application to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async summaryApplication(appId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationSummary>> {
            const localVarAxiosArgs = await ApplicationServiceApiAxiosParamCreator(configuration).summaryApplication(appId, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an application
         * @param {string} appId The id of the application to find
         * @param {Application} application 
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApplication(appId: string, application: Application, includeEnvironments?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await ApplicationServiceApiAxiosParamCreator(configuration).updateApplication(appId, application, includeEnvironments, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update an application
         * @param {string} id The id of the portfolio to find
         * @param {Application} application 
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {boolean} [includeFeatures] Include the features in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApplicationOnPortfolio(id: string, application: Application, includeEnvironments?: boolean, includeFeatures?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application>> {
            const localVarAxiosArgs = await ApplicationServiceApiAxiosParamCreator(configuration).updateApplicationOnPortfolio(id, application, includeEnvironments, includeFeatures, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ApplicationServiceApi - factory interface
 * @export
 */
export const ApplicationServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Gets the permissions of the current user for the specified application
         * @param {string} id The id of the application to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        applicationPermissions(id: string, options?: any): AxiosPromise<ApplicationPermissions> {
            return ApplicationServiceApiFp(configuration).applicationPermissions(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new application
         * @param {string} id The id of the portfolio to find
         * @param {CreateApplication} createApplication 
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {boolean} [includeFeatures] Include the features in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication(id: string, createApplication: CreateApplication, includeEnvironments?: boolean, includeFeatures?: boolean, options?: any): AxiosPromise<Application> {
            return ApplicationServiceApiFp(configuration).createApplication(id, createApplication, includeEnvironments, includeFeatures, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an application
         * @param {string} appId The id of the application to find
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication(appId: string, includeEnvironments?: boolean, options?: any): AxiosPromise<boolean> {
            return ApplicationServiceApiFp(configuration).deleteApplication(appId, includeEnvironments, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of applications.
         * @param {string} id The id of the portfolio to find
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {boolean} [includeFeatures] Include the features in the result
         * @param {SortOrder} [order] how to order the results
         * @param {string} [filter] What to filter the results by
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findApplications(id: string, includeEnvironments?: boolean, includeFeatures?: boolean, order?: SortOrder, filter?: string, options?: any): AxiosPromise<Array<Application>> {
            return ApplicationServiceApiFp(configuration).findApplications(id, includeEnvironments, includeFeatures, order, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * Get application
         * @param {string} appId The id of the application to find
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplication(appId: string, includeEnvironments?: boolean, options?: any): AxiosPromise<Application> {
            return ApplicationServiceApiFp(configuration).getApplication(appId, includeEnvironments, options).then((request) => request(axios, basePath));
        },
        /**
         * Geta summary of the application status
         * @param {string} appId The id of the application to find
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summaryApplication(appId: string, options?: any): AxiosPromise<ApplicationSummary> {
            return ApplicationServiceApiFp(configuration).summaryApplication(appId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an application
         * @param {string} appId The id of the application to find
         * @param {Application} application 
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplication(appId: string, application: Application, includeEnvironments?: boolean, options?: any): AxiosPromise<Application> {
            return ApplicationServiceApiFp(configuration).updateApplication(appId, application, includeEnvironments, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an application
         * @param {string} id The id of the portfolio to find
         * @param {Application} application 
         * @param {boolean} [includeEnvironments] Include the environments in the result
         * @param {boolean} [includeFeatures] Include the features in the result
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplicationOnPortfolio(id: string, application: Application, includeEnvironments?: boolean, includeFeatures?: boolean, options?: any): AxiosPromise<Application> {
            return ApplicationServiceApiFp(configuration).updateApplicationOnPortfolio(id, application, includeEnvironments, includeFeatures, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationServiceApi - object-oriented interface
 * @export
 * @class ApplicationServiceApi
 * @extends {BaseAPI}
 */
export class ApplicationServiceApi extends BaseAPI {
    /**
     * Gets the permissions of the current user for the specified application
     * @param {string} id The id of the application to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationServiceApi
     */
    public applicationPermissions(id: string, options?: any): AxiosPromise<ApplicationPermissions> {
        return ApplicationServiceApiFp(this.configuration).applicationPermissions(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new application
     * @param {string} id The id of the portfolio to find
     * @param {CreateApplication} createApplication 
     * @param {boolean} [includeEnvironments] Include the environments in the result
     * @param {boolean} [includeFeatures] Include the features in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationServiceApi
     */
    public createApplication(id: string, createApplication: CreateApplication, includeEnvironments?: boolean, includeFeatures?: boolean, options?: any): AxiosPromise<Application> {
        return ApplicationServiceApiFp(this.configuration).createApplication(id, createApplication, includeEnvironments, includeFeatures, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an application
     * @param {string} appId The id of the application to find
     * @param {boolean} [includeEnvironments] Include the environments in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationServiceApi
     */
    public deleteApplication(appId: string, includeEnvironments?: boolean, options?: any): AxiosPromise<boolean> {
        return ApplicationServiceApiFp(this.configuration).deleteApplication(appId, includeEnvironments, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of applications.
     * @param {string} id The id of the portfolio to find
     * @param {boolean} [includeEnvironments] Include the environments in the result
     * @param {boolean} [includeFeatures] Include the features in the result
     * @param {SortOrder} [order] how to order the results
     * @param {string} [filter] What to filter the results by
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationServiceApi
     */
    public findApplications(id: string, includeEnvironments?: boolean, includeFeatures?: boolean, order?: SortOrder, filter?: string, options?: any): AxiosPromise<Array<Application>> {
        return ApplicationServiceApiFp(this.configuration).findApplications(id, includeEnvironments, includeFeatures, order, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get application
     * @param {string} appId The id of the application to find
     * @param {boolean} [includeEnvironments] Include the environments in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationServiceApi
     */
    public getApplication(appId: string, includeEnvironments?: boolean, options?: any): AxiosPromise<Application> {
        return ApplicationServiceApiFp(this.configuration).getApplication(appId, includeEnvironments, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Geta summary of the application status
     * @param {string} appId The id of the application to find
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationServiceApi
     */
    public summaryApplication(appId: string, options?: any): AxiosPromise<ApplicationSummary> {
        return ApplicationServiceApiFp(this.configuration).summaryApplication(appId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an application
     * @param {string} appId The id of the application to find
     * @param {Application} application 
     * @param {boolean} [includeEnvironments] Include the environments in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationServiceApi
     */
    public updateApplication(appId: string, application: Application, includeEnvironments?: boolean, options?: any): AxiosPromise<Application> {
        return ApplicationServiceApiFp(this.configuration).updateApplication(appId, application, includeEnvironments, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an application
     * @param {string} id The id of the portfolio to find
     * @param {Application} application 
     * @param {boolean} [includeEnvironments] Include the environments in the result
     * @param {boolean} [includeFeatures] Include the features in the result
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationServiceApi
     */
    public updateApplicationOnPortfolio(id: string, application: Application, includeEnvironments?: boolean, includeFeatures?: boolean, options?: any): AxiosPromise<Application> {
        return ApplicationServiceApiFp(this.configuration).updateApplicationOnPortfolio(id, application, includeEnvironments, includeFeatures, options).then((request) => request(this.axios, this.basePath));
    }
}
