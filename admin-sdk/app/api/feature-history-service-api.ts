/* tslint:disable */
/* eslint-disable */
/**
 * ManagementResourceApi
 * This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FeatureHistoryList } from '../models';
// @ts-ignore
import { ObjectSerializer } from '../models';
/**
 * FeatureHistoryServiceApi - axios parameter creator
 * @export
 */
export const FeatureHistoryServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a paginated list of history of feature value changes
         * @param {string} appId 
         * @param {Array<string>} [featureKeys] Allows you to search by keys. If featureIds are provided, keys are ignored
         * @param {Array<string>} [featureIds] The ids of the features you want, prefer this over keys as keys can change
         * @param {Array<number>} [versions] If only one feature is requested, you can specify the specific versions you want
         * @param {Array<string>} [environmentIds] Any environments you want the feature keys/ids from
         * @param {number} [max] This is the max to result, limited by server
         * @param {number} [startAt] what position in the results to start at
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeatureHistory: async (appId: string, featureKeys?: Array<string>, featureIds?: Array<string>, versions?: Array<number>, environmentIds?: Array<string>, max?: number, startAt?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling listFeatureHistory.');
            }
            const localVarPath = `/mr-api/application/{appId}/feature-history`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (featureKeys !== undefined) {
                localVarQueryParameter['featureKeys'] = featureKeys;
            }

            if (featureIds !== undefined) {
                localVarQueryParameter['featureIds'] = featureIds;
            }

            if (versions !== undefined) {
                localVarQueryParameter['versions'] = versions;
            }

            if (environmentIds !== undefined) {
                localVarQueryParameter['environmentIds'] = environmentIds;
            }

            if (max !== undefined) {
                localVarQueryParameter['max'] = max;
            }

            if (startAt !== undefined) {
                localVarQueryParameter['startAt'] = startAt;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeatureHistoryServiceApi - functional programming interface
 * @export
 */
export const FeatureHistoryServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Gets a paginated list of history of feature value changes
         * @param {string} appId 
         * @param {Array<string>} [featureKeys] Allows you to search by keys. If featureIds are provided, keys are ignored
         * @param {Array<string>} [featureIds] The ids of the features you want, prefer this over keys as keys can change
         * @param {Array<number>} [versions] If only one feature is requested, you can specify the specific versions you want
         * @param {Array<string>} [environmentIds] Any environments you want the feature keys/ids from
         * @param {number} [max] This is the max to result, limited by server
         * @param {number} [startAt] what position in the results to start at
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listFeatureHistory(appId: string, featureKeys?: Array<string>, featureIds?: Array<string>, versions?: Array<number>, environmentIds?: Array<string>, max?: number, startAt?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureHistoryList>> {
            const localVarAxiosArgs = await FeatureHistoryServiceApiAxiosParamCreator(configuration).listFeatureHistory(appId, featureKeys, featureIds, versions, environmentIds, max, startAt, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FeatureHistoryServiceApi - factory interface
 * @export
 */
export const FeatureHistoryServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Gets a paginated list of history of feature value changes
         * @param {string} appId 
         * @param {Array<string>} [featureKeys] Allows you to search by keys. If featureIds are provided, keys are ignored
         * @param {Array<string>} [featureIds] The ids of the features you want, prefer this over keys as keys can change
         * @param {Array<number>} [versions] If only one feature is requested, you can specify the specific versions you want
         * @param {Array<string>} [environmentIds] Any environments you want the feature keys/ids from
         * @param {number} [max] This is the max to result, limited by server
         * @param {number} [startAt] what position in the results to start at
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFeatureHistory(appId: string, featureKeys?: Array<string>, featureIds?: Array<string>, versions?: Array<number>, environmentIds?: Array<string>, max?: number, startAt?: number, options?: any): AxiosPromise<FeatureHistoryList> {
            return FeatureHistoryServiceApiFp(configuration).listFeatureHistory(appId, featureKeys, featureIds, versions, environmentIds, max, startAt, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FeatureHistoryServiceApi - object-oriented interface
 * @export
 * @class FeatureHistoryServiceApi
 * @extends {BaseAPI}
 */
export class FeatureHistoryServiceApi extends BaseAPI {
    /**
     * Gets a paginated list of history of feature value changes
     * @param {string} appId 
     * @param {Array<string>} [featureKeys] Allows you to search by keys. If featureIds are provided, keys are ignored
     * @param {Array<string>} [featureIds] The ids of the features you want, prefer this over keys as keys can change
     * @param {Array<number>} [versions] If only one feature is requested, you can specify the specific versions you want
     * @param {Array<string>} [environmentIds] Any environments you want the feature keys/ids from
     * @param {number} [max] This is the max to result, limited by server
     * @param {number} [startAt] what position in the results to start at
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeatureHistoryServiceApi
     */
    public listFeatureHistory(appId: string, featureKeys?: Array<string>, featureIds?: Array<string>, versions?: Array<number>, environmentIds?: Array<string>, max?: number, startAt?: number, options?: any): AxiosPromise<FeatureHistoryList> {
        return FeatureHistoryServiceApiFp(this.configuration).listFeatureHistory(appId, featureKeys, featureIds, versions, environmentIds, max, startAt, options).then((request) => request(this.axios, this.basePath));
    }
}
