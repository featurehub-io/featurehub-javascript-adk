/* tslint:disable */
/* eslint-disable */
/**
 * ManagementResourceApi
 * This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.
 *
 * The version of the OpenAPI document: 1.2.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApplicationRolloutStrategy } from '../models';
// @ts-ignore
import { ApplicationRolloutStrategyList } from '../models';
// @ts-ignore
import { CreateApplicationRolloutStrategy } from '../models';
// @ts-ignore
import { RolloutStrategyValidationRequest } from '../models';
// @ts-ignore
import { RolloutStrategyValidationResponse } from '../models';
// @ts-ignore
import { UpdateApplicationRolloutStrategy } from '../models';
// @ts-ignore
import { ObjectSerializer } from '../models';
/**
 * ApplicationRolloutStrategyServiceApi - axios parameter creator
 * @export
 */
export const ApplicationRolloutStrategyServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {CreateApplicationRolloutStrategy} createApplicationRolloutStrategy 
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplicationStrategy: async (appId: string, createApplicationRolloutStrategy: CreateApplicationRolloutStrategy, includeWhoChanged?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling createApplicationStrategy.');
            }
            // verify required parameter 'createApplicationRolloutStrategy' is not null or undefined
            if (createApplicationRolloutStrategy === null || createApplicationRolloutStrategy === undefined) {
                throw new RequiredError('createApplicationRolloutStrategy','Required parameter createApplicationRolloutStrategy was null or undefined when calling createApplicationStrategy.');
            }
            const localVarPath = `/mr-api/application/{appId}/strategy`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeWhoChanged !== undefined) {
                localVarQueryParameter['includeWhoChanged'] = includeWhoChanged;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createApplicationRolloutStrategy !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createApplicationRolloutStrategy !== undefined ? ObjectSerializer.serialize(createApplicationRolloutStrategy, 'CreateApplicationRolloutStrategy') : {}) : (createApplicationRolloutStrategy || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} appStrategyId The id of the strategy or the unique name of it
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationStrategy: async (appId: string, appStrategyId: string, includeWhoChanged?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling deleteApplicationStrategy.');
            }
            // verify required parameter 'appStrategyId' is not null or undefined
            if (appStrategyId === null || appStrategyId === undefined) {
                throw new RequiredError('appStrategyId','Required parameter appStrategyId was null or undefined when calling deleteApplicationStrategy.');
            }
            const localVarPath = `/mr-api/application/{appId}/rollout-strategy/{appStrategyId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"appStrategyId"}}`, encodeURIComponent(String(appStrategyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeWhoChanged !== undefined) {
                localVarQueryParameter['includeWhoChanged'] = includeWhoChanged;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} appStrategyId The id of the strategy or the unique name of it
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationStrategy: async (appId: string, appStrategyId: string, includeWhoChanged?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling getApplicationStrategy.');
            }
            // verify required parameter 'appStrategyId' is not null or undefined
            if (appStrategyId === null || appStrategyId === undefined) {
                throw new RequiredError('appStrategyId','Required parameter appStrategyId was null or undefined when calling getApplicationStrategy.');
            }
            const localVarPath = `/mr-api/application/{appId}/rollout-strategy/{appStrategyId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"appStrategyId"}}`, encodeURIComponent(String(appStrategyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeWhoChanged !== undefined) {
                localVarQueryParameter['includeWhoChanged'] = includeWhoChanged;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {boolean} [includeArchived] Include archived strategies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicationStrategies: async (appId: string, includeWhoChanged?: boolean, includeArchived?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling listApplicationStrategies.');
            }
            const localVarPath = `/mr-api/application/{appId}/strategy`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeWhoChanged !== undefined) {
                localVarQueryParameter['includeWhoChanged'] = includeWhoChanged;
            }

            if (includeArchived !== undefined) {
                localVarQueryParameter['includeArchived'] = includeArchived;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} appStrategyId The id of the strategy or the unique name of it
         * @param {UpdateApplicationRolloutStrategy} updateApplicationRolloutStrategy 
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplicationStrategy: async (appId: string, appStrategyId: string, updateApplicationRolloutStrategy: UpdateApplicationRolloutStrategy, includeWhoChanged?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling updateApplicationStrategy.');
            }
            // verify required parameter 'appStrategyId' is not null or undefined
            if (appStrategyId === null || appStrategyId === undefined) {
                throw new RequiredError('appStrategyId','Required parameter appStrategyId was null or undefined when calling updateApplicationStrategy.');
            }
            // verify required parameter 'updateApplicationRolloutStrategy' is not null or undefined
            if (updateApplicationRolloutStrategy === null || updateApplicationRolloutStrategy === undefined) {
                throw new RequiredError('updateApplicationRolloutStrategy','Required parameter updateApplicationRolloutStrategy was null or undefined when calling updateApplicationStrategy.');
            }
            const localVarPath = `/mr-api/application/{appId}/rollout-strategy/{appStrategyId}`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)))
                .replace(`{${"appStrategyId"}}`, encodeURIComponent(String(appStrategyId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (includeWhoChanged !== undefined) {
                localVarQueryParameter['includeWhoChanged'] = includeWhoChanged;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateApplicationRolloutStrategy !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateApplicationRolloutStrategy !== undefined ? ObjectSerializer.serialize(updateApplicationRolloutStrategy, 'UpdateApplicationRolloutStrategy') : {}) : (updateApplicationRolloutStrategy || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provide server validation responses for this group of rollout strategies
         * @param {string} appId The id of the application to find
         * @param {RolloutStrategyValidationRequest} rolloutStrategyValidationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate: async (appId: string, rolloutStrategyValidationRequest: RolloutStrategyValidationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'appId' is not null or undefined
            if (appId === null || appId === undefined) {
                throw new RequiredError('appId','Required parameter appId was null or undefined when calling validate.');
            }
            // verify required parameter 'rolloutStrategyValidationRequest' is not null or undefined
            if (rolloutStrategyValidationRequest === null || rolloutStrategyValidationRequest === undefined) {
                throw new RequiredError('rolloutStrategyValidationRequest','Required parameter rolloutStrategyValidationRequest was null or undefined when calling validate.');
            }
            const localVarPath = `/mr-api/application/{appId}/rollout-strategy-validation`
                .replace(`{${"appId"}}`, encodeURIComponent(String(appId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof rolloutStrategyValidationRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(rolloutStrategyValidationRequest !== undefined ? ObjectSerializer.serialize(rolloutStrategyValidationRequest, 'RolloutStrategyValidationRequest') : {}) : (rolloutStrategyValidationRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApplicationRolloutStrategyServiceApi - functional programming interface
 * @export
 */
export const ApplicationRolloutStrategyServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {CreateApplicationRolloutStrategy} createApplicationRolloutStrategy 
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createApplicationStrategy(appId: string, createApplicationRolloutStrategy: CreateApplicationRolloutStrategy, includeWhoChanged?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationRolloutStrategy>> {
            const localVarAxiosArgs = await ApplicationRolloutStrategyServiceApiAxiosParamCreator(configuration).createApplicationStrategy(appId, createApplicationRolloutStrategy, includeWhoChanged, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} appStrategyId The id of the strategy or the unique name of it
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteApplicationStrategy(appId: string, appStrategyId: string, includeWhoChanged?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await ApplicationRolloutStrategyServiceApiAxiosParamCreator(configuration).deleteApplicationStrategy(appId, appStrategyId, includeWhoChanged, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} appStrategyId The id of the strategy or the unique name of it
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getApplicationStrategy(appId: string, appStrategyId: string, includeWhoChanged?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationRolloutStrategy>> {
            const localVarAxiosArgs = await ApplicationRolloutStrategyServiceApiAxiosParamCreator(configuration).getApplicationStrategy(appId, appStrategyId, includeWhoChanged, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {boolean} [includeArchived] Include archived strategies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listApplicationStrategies(appId: string, includeWhoChanged?: boolean, includeArchived?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationRolloutStrategyList>> {
            const localVarAxiosArgs = await ApplicationRolloutStrategyServiceApiAxiosParamCreator(configuration).listApplicationStrategies(appId, includeWhoChanged, includeArchived, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} appStrategyId The id of the strategy or the unique name of it
         * @param {UpdateApplicationRolloutStrategy} updateApplicationRolloutStrategy 
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateApplicationStrategy(appId: string, appStrategyId: string, updateApplicationRolloutStrategy: UpdateApplicationRolloutStrategy, includeWhoChanged?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationRolloutStrategy>> {
            const localVarAxiosArgs = await ApplicationRolloutStrategyServiceApiAxiosParamCreator(configuration).updateApplicationStrategy(appId, appStrategyId, updateApplicationRolloutStrategy, includeWhoChanged, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Provide server validation responses for this group of rollout strategies
         * @param {string} appId The id of the application to find
         * @param {RolloutStrategyValidationRequest} rolloutStrategyValidationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validate(appId: string, rolloutStrategyValidationRequest: RolloutStrategyValidationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolloutStrategyValidationResponse>> {
            const localVarAxiosArgs = await ApplicationRolloutStrategyServiceApiAxiosParamCreator(configuration).validate(appId, rolloutStrategyValidationRequest, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ApplicationRolloutStrategyServiceApi - factory interface
 * @export
 */
export const ApplicationRolloutStrategyServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {CreateApplicationRolloutStrategy} createApplicationRolloutStrategy 
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplicationStrategy(appId: string, createApplicationRolloutStrategy: CreateApplicationRolloutStrategy, includeWhoChanged?: boolean, options?: any): AxiosPromise<ApplicationRolloutStrategy> {
            return ApplicationRolloutStrategyServiceApiFp(configuration).createApplicationStrategy(appId, createApplicationRolloutStrategy, includeWhoChanged, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} appStrategyId The id of the strategy or the unique name of it
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplicationStrategy(appId: string, appStrategyId: string, includeWhoChanged?: boolean, options?: any): AxiosPromise<void> {
            return ApplicationRolloutStrategyServiceApiFp(configuration).deleteApplicationStrategy(appId, appStrategyId, includeWhoChanged, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} appStrategyId The id of the strategy or the unique name of it
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApplicationStrategy(appId: string, appStrategyId: string, includeWhoChanged?: boolean, options?: any): AxiosPromise<ApplicationRolloutStrategy> {
            return ApplicationRolloutStrategyServiceApiFp(configuration).getApplicationStrategy(appId, appStrategyId, includeWhoChanged, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {boolean} [includeArchived] Include archived strategies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicationStrategies(appId: string, includeWhoChanged?: boolean, includeArchived?: boolean, options?: any): AxiosPromise<ApplicationRolloutStrategyList> {
            return ApplicationRolloutStrategyServiceApiFp(configuration).listApplicationStrategies(appId, includeWhoChanged, includeArchived, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} appId The id of the application to find
         * @param {string} appStrategyId The id of the strategy or the unique name of it
         * @param {UpdateApplicationRolloutStrategy} updateApplicationRolloutStrategy 
         * @param {boolean} [includeWhoChanged] include who changed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateApplicationStrategy(appId: string, appStrategyId: string, updateApplicationRolloutStrategy: UpdateApplicationRolloutStrategy, includeWhoChanged?: boolean, options?: any): AxiosPromise<ApplicationRolloutStrategy> {
            return ApplicationRolloutStrategyServiceApiFp(configuration).updateApplicationStrategy(appId, appStrategyId, updateApplicationRolloutStrategy, includeWhoChanged, options).then((request) => request(axios, basePath));
        },
        /**
         * Provide server validation responses for this group of rollout strategies
         * @param {string} appId The id of the application to find
         * @param {RolloutStrategyValidationRequest} rolloutStrategyValidationRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validate(appId: string, rolloutStrategyValidationRequest: RolloutStrategyValidationRequest, options?: any): AxiosPromise<RolloutStrategyValidationResponse> {
            return ApplicationRolloutStrategyServiceApiFp(configuration).validate(appId, rolloutStrategyValidationRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApplicationRolloutStrategyServiceApi - object-oriented interface
 * @export
 * @class ApplicationRolloutStrategyServiceApi
 * @extends {BaseAPI}
 */
export class ApplicationRolloutStrategyServiceApi extends BaseAPI {
    /**
     * 
     * @param {string} appId The id of the application to find
     * @param {CreateApplicationRolloutStrategy} createApplicationRolloutStrategy 
     * @param {boolean} [includeWhoChanged] include who changed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationRolloutStrategyServiceApi
     */
    public createApplicationStrategy(appId: string, createApplicationRolloutStrategy: CreateApplicationRolloutStrategy, includeWhoChanged?: boolean, options?: any): AxiosPromise<ApplicationRolloutStrategy> {
        return ApplicationRolloutStrategyServiceApiFp(this.configuration).createApplicationStrategy(appId, createApplicationRolloutStrategy, includeWhoChanged, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} appId The id of the application to find
     * @param {string} appStrategyId The id of the strategy or the unique name of it
     * @param {boolean} [includeWhoChanged] include who changed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationRolloutStrategyServiceApi
     */
    public deleteApplicationStrategy(appId: string, appStrategyId: string, includeWhoChanged?: boolean, options?: any): AxiosPromise<void> {
        return ApplicationRolloutStrategyServiceApiFp(this.configuration).deleteApplicationStrategy(appId, appStrategyId, includeWhoChanged, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} appId The id of the application to find
     * @param {string} appStrategyId The id of the strategy or the unique name of it
     * @param {boolean} [includeWhoChanged] include who changed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationRolloutStrategyServiceApi
     */
    public getApplicationStrategy(appId: string, appStrategyId: string, includeWhoChanged?: boolean, options?: any): AxiosPromise<ApplicationRolloutStrategy> {
        return ApplicationRolloutStrategyServiceApiFp(this.configuration).getApplicationStrategy(appId, appStrategyId, includeWhoChanged, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} appId The id of the application to find
     * @param {boolean} [includeWhoChanged] include who changed
     * @param {boolean} [includeArchived] Include archived strategies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationRolloutStrategyServiceApi
     */
    public listApplicationStrategies(appId: string, includeWhoChanged?: boolean, includeArchived?: boolean, options?: any): AxiosPromise<ApplicationRolloutStrategyList> {
        return ApplicationRolloutStrategyServiceApiFp(this.configuration).listApplicationStrategies(appId, includeWhoChanged, includeArchived, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} appId The id of the application to find
     * @param {string} appStrategyId The id of the strategy or the unique name of it
     * @param {UpdateApplicationRolloutStrategy} updateApplicationRolloutStrategy 
     * @param {boolean} [includeWhoChanged] include who changed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationRolloutStrategyServiceApi
     */
    public updateApplicationStrategy(appId: string, appStrategyId: string, updateApplicationRolloutStrategy: UpdateApplicationRolloutStrategy, includeWhoChanged?: boolean, options?: any): AxiosPromise<ApplicationRolloutStrategy> {
        return ApplicationRolloutStrategyServiceApiFp(this.configuration).updateApplicationStrategy(appId, appStrategyId, updateApplicationRolloutStrategy, includeWhoChanged, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provide server validation responses for this group of rollout strategies
     * @param {string} appId The id of the application to find
     * @param {RolloutStrategyValidationRequest} rolloutStrategyValidationRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApplicationRolloutStrategyServiceApi
     */
    public validate(appId: string, rolloutStrategyValidationRequest: RolloutStrategyValidationRequest, options?: any): AxiosPromise<RolloutStrategyValidationResponse> {
        return ApplicationRolloutStrategyServiceApiFp(this.configuration).validate(appId, rolloutStrategyValidationRequest, options).then((request) => request(this.axios, this.basePath));
    }
}
