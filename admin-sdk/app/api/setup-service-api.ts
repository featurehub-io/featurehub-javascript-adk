/* tslint:disable */
/* eslint-disable */
/**
 * ManagementResourceApi
 * This describes the API clients use for accessing features. This reflects the API from 1.5.7 onwards.
 *
 * The version of the OpenAPI document: 1.1.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SetupMissingResponse } from '../models';
// @ts-ignore
import { SetupResponse } from '../models';
// @ts-ignore
import { SetupSiteAdmin } from '../models';
// @ts-ignore
import { TokenizedPerson } from '../models';
// @ts-ignore
import { ObjectSerializer } from '../models';
/**
 * SetupServiceApi - axios parameter creator
 * @export
 */
export const SetupServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Ping Feature Hub
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isInstalled: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/mr-api/initialize`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Setup site admin
         * @param {SetupSiteAdmin} setupSiteAdmin setupSiteAdmin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupSiteAdmin: async (setupSiteAdmin: SetupSiteAdmin, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'setupSiteAdmin' is not null or undefined
            if (setupSiteAdmin === null || setupSiteAdmin === undefined) {
                throw new RequiredError('setupSiteAdmin','Required parameter setupSiteAdmin was null or undefined when calling setupSiteAdmin.');
            }
            const localVarPath = `/mr-api/initialize`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof setupSiteAdmin !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(setupSiteAdmin !== undefined ? ObjectSerializer.serialize(setupSiteAdmin, 'SetupSiteAdmin') : {}) : (setupSiteAdmin || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SetupServiceApi - functional programming interface
 * @export
 */
export const SetupServiceApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Ping Feature Hub
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async isInstalled(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetupResponse>> {
            const localVarAxiosArgs = await SetupServiceApiAxiosParamCreator(configuration).isInstalled(options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Setup site admin
         * @param {SetupSiteAdmin} setupSiteAdmin setupSiteAdmin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setupSiteAdmin(setupSiteAdmin: SetupSiteAdmin, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenizedPerson>> {
            const localVarAxiosArgs = await SetupServiceApiAxiosParamCreator(configuration).setupSiteAdmin(setupSiteAdmin, options);
            return (axios: AxiosInstance = (configuration?.axiosInstance || globalAxios), basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
          return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SetupServiceApi - factory interface
 * @export
 */
export const SetupServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Ping Feature Hub
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        isInstalled(options?: any): AxiosPromise<SetupResponse> {
            return SetupServiceApiFp(configuration).isInstalled(options).then((request) => request(axios, basePath));
        },
        /**
         * Setup site admin
         * @param {SetupSiteAdmin} setupSiteAdmin setupSiteAdmin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setupSiteAdmin(setupSiteAdmin: SetupSiteAdmin, options?: any): AxiosPromise<TokenizedPerson> {
            return SetupServiceApiFp(configuration).setupSiteAdmin(setupSiteAdmin, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SetupServiceApi - object-oriented interface
 * @export
 * @class SetupServiceApi
 * @extends {BaseAPI}
 */
export class SetupServiceApi extends BaseAPI {
    /**
     * Ping Feature Hub
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SetupServiceApi
     */
    public isInstalled(options?: any): AxiosPromise<SetupResponse> {
        return SetupServiceApiFp(this.configuration).isInstalled(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Setup site admin
     * @param {SetupSiteAdmin} setupSiteAdmin setupSiteAdmin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SetupServiceApi
     */
    public setupSiteAdmin(setupSiteAdmin: SetupSiteAdmin, options?: any): AxiosPromise<TokenizedPerson> {
        return SetupServiceApiFp(this.configuration).setupSiteAdmin(setupSiteAdmin, options).then((request) => request(this.axios, this.basePath));
    }
}
